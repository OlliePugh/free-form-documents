
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Notebook
 * 
 */
export type Notebook = $Result.DefaultSelection<Prisma.$NotebookPayload>
/**
 * Model SectionGroup
 * 
 */
export type SectionGroup = $Result.DefaultSelection<Prisma.$SectionGroupPayload>
/**
 * Model Section
 * 
 */
export type Section = $Result.DefaultSelection<Prisma.$SectionPayload>
/**
 * Model Page
 * 
 */
export type Page = $Result.DefaultSelection<Prisma.$PagePayload>
/**
 * Model PageComponent
 * 
 */
export type PageComponent = $Result.DefaultSelection<Prisma.$PageComponentPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Notebooks
 * const notebooks = await prisma.notebook.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Notebooks
   * const notebooks = await prisma.notebook.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.notebook`: Exposes CRUD operations for the **Notebook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notebooks
    * const notebooks = await prisma.notebook.findMany()
    * ```
    */
  get notebook(): Prisma.NotebookDelegate<ExtArgs>;

  /**
   * `prisma.sectionGroup`: Exposes CRUD operations for the **SectionGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SectionGroups
    * const sectionGroups = await prisma.sectionGroup.findMany()
    * ```
    */
  get sectionGroup(): Prisma.SectionGroupDelegate<ExtArgs>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<ExtArgs>;

  /**
   * `prisma.page`: Exposes CRUD operations for the **Page** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pages
    * const pages = await prisma.page.findMany()
    * ```
    */
  get page(): Prisma.PageDelegate<ExtArgs>;

  /**
   * `prisma.pageComponent`: Exposes CRUD operations for the **PageComponent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PageComponents
    * const pageComponents = await prisma.pageComponent.findMany()
    * ```
    */
  get pageComponent(): Prisma.PageComponentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Notebook: 'Notebook',
    SectionGroup: 'SectionGroup',
    Section: 'Section',
    Page: 'Page',
    PageComponent: 'PageComponent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "notebook" | "sectionGroup" | "section" | "page" | "pageComponent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Notebook: {
        payload: Prisma.$NotebookPayload<ExtArgs>
        fields: Prisma.NotebookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotebookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotebookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload>
          }
          findFirst: {
            args: Prisma.NotebookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotebookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload>
          }
          findMany: {
            args: Prisma.NotebookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload>[]
          }
          create: {
            args: Prisma.NotebookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload>
          }
          createMany: {
            args: Prisma.NotebookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotebookCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload>[]
          }
          delete: {
            args: Prisma.NotebookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload>
          }
          update: {
            args: Prisma.NotebookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload>
          }
          deleteMany: {
            args: Prisma.NotebookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotebookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotebookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotebookPayload>
          }
          aggregate: {
            args: Prisma.NotebookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotebook>
          }
          groupBy: {
            args: Prisma.NotebookGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotebookGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotebookCountArgs<ExtArgs>
            result: $Utils.Optional<NotebookCountAggregateOutputType> | number
          }
        }
      }
      SectionGroup: {
        payload: Prisma.$SectionGroupPayload<ExtArgs>
        fields: Prisma.SectionGroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionGroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionGroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload>
          }
          findFirst: {
            args: Prisma.SectionGroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionGroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload>
          }
          findMany: {
            args: Prisma.SectionGroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload>[]
          }
          create: {
            args: Prisma.SectionGroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload>
          }
          createMany: {
            args: Prisma.SectionGroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SectionGroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload>[]
          }
          delete: {
            args: Prisma.SectionGroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload>
          }
          update: {
            args: Prisma.SectionGroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload>
          }
          deleteMany: {
            args: Prisma.SectionGroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionGroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SectionGroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionGroupPayload>
          }
          aggregate: {
            args: Prisma.SectionGroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSectionGroup>
          }
          groupBy: {
            args: Prisma.SectionGroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionGroupCountArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupCountAggregateOutputType> | number
          }
        }
      }
      Section: {
        payload: Prisma.$SectionPayload<ExtArgs>
        fields: Prisma.SectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findFirst: {
            args: Prisma.SectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findMany: {
            args: Prisma.SectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          create: {
            args: Prisma.SectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          createMany: {
            args: Prisma.SectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          delete: {
            args: Prisma.SectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          update: {
            args: Prisma.SectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          deleteMany: {
            args: Prisma.SectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          aggregate: {
            args: Prisma.SectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSection>
          }
          groupBy: {
            args: Prisma.SectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionCountArgs<ExtArgs>
            result: $Utils.Optional<SectionCountAggregateOutputType> | number
          }
        }
      }
      Page: {
        payload: Prisma.$PagePayload<ExtArgs>
        fields: Prisma.PageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          findFirst: {
            args: Prisma.PageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          findMany: {
            args: Prisma.PageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>[]
          }
          create: {
            args: Prisma.PageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          createMany: {
            args: Prisma.PageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>[]
          }
          delete: {
            args: Prisma.PageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          update: {
            args: Prisma.PageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          deleteMany: {
            args: Prisma.PageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          aggregate: {
            args: Prisma.PageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePage>
          }
          groupBy: {
            args: Prisma.PageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageCountArgs<ExtArgs>
            result: $Utils.Optional<PageCountAggregateOutputType> | number
          }
        }
      }
      PageComponent: {
        payload: Prisma.$PageComponentPayload<ExtArgs>
        fields: Prisma.PageComponentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PageComponentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageComponentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload>
          }
          findFirst: {
            args: Prisma.PageComponentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageComponentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload>
          }
          findMany: {
            args: Prisma.PageComponentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload>[]
          }
          create: {
            args: Prisma.PageComponentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload>
          }
          createMany: {
            args: Prisma.PageComponentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PageComponentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload>[]
          }
          delete: {
            args: Prisma.PageComponentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload>
          }
          update: {
            args: Prisma.PageComponentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload>
          }
          deleteMany: {
            args: Prisma.PageComponentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PageComponentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PageComponentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageComponentPayload>
          }
          aggregate: {
            args: Prisma.PageComponentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePageComponent>
          }
          groupBy: {
            args: Prisma.PageComponentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageComponentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageComponentCountArgs<ExtArgs>
            result: $Utils.Optional<PageComponentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type NotebookCountOutputType
   */

  export type NotebookCountOutputType = {
    sectionGroups: number
    sections: number
  }

  export type NotebookCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sectionGroups?: boolean | NotebookCountOutputTypeCountSectionGroupsArgs
    sections?: boolean | NotebookCountOutputTypeCountSectionsArgs
  }

  // Custom InputTypes
  /**
   * NotebookCountOutputType without action
   */
  export type NotebookCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotebookCountOutputType
     */
    select?: NotebookCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotebookCountOutputType without action
   */
  export type NotebookCountOutputTypeCountSectionGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionGroupWhereInput
  }

  /**
   * NotebookCountOutputType without action
   */
  export type NotebookCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }


  /**
   * Count Type SectionGroupCountOutputType
   */

  export type SectionGroupCountOutputType = {
    children: number
    sections: number
  }

  export type SectionGroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | SectionGroupCountOutputTypeCountChildrenArgs
    sections?: boolean | SectionGroupCountOutputTypeCountSectionsArgs
  }

  // Custom InputTypes
  /**
   * SectionGroupCountOutputType without action
   */
  export type SectionGroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroupCountOutputType
     */
    select?: SectionGroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectionGroupCountOutputType without action
   */
  export type SectionGroupCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionGroupWhereInput
  }

  /**
   * SectionGroupCountOutputType without action
   */
  export type SectionGroupCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }


  /**
   * Count Type SectionCountOutputType
   */

  export type SectionCountOutputType = {
    pages: number
  }

  export type SectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pages?: boolean | SectionCountOutputTypeCountPagesArgs
  }

  // Custom InputTypes
  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCountOutputType
     */
    select?: SectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountPagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageWhereInput
  }


  /**
   * Count Type PageCountOutputType
   */

  export type PageCountOutputType = {
    components: number
  }

  export type PageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    components?: boolean | PageCountOutputTypeCountComponentsArgs
  }

  // Custom InputTypes
  /**
   * PageCountOutputType without action
   */
  export type PageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageCountOutputType
     */
    select?: PageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PageCountOutputType without action
   */
  export type PageCountOutputTypeCountComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageComponentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Notebook
   */

  export type AggregateNotebook = {
    _count: NotebookCountAggregateOutputType | null
    _min: NotebookMinAggregateOutputType | null
    _max: NotebookMaxAggregateOutputType | null
  }

  export type NotebookMinAggregateOutputType = {
    id: string | null
    title: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotebookMaxAggregateOutputType = {
    id: string | null
    title: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotebookCountAggregateOutputType = {
    id: number
    title: number
    color: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotebookMinAggregateInputType = {
    id?: true
    title?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotebookMaxAggregateInputType = {
    id?: true
    title?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotebookCountAggregateInputType = {
    id?: true
    title?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotebookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notebook to aggregate.
     */
    where?: NotebookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notebooks to fetch.
     */
    orderBy?: NotebookOrderByWithRelationInput | NotebookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotebookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notebooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notebooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notebooks
    **/
    _count?: true | NotebookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotebookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotebookMaxAggregateInputType
  }

  export type GetNotebookAggregateType<T extends NotebookAggregateArgs> = {
        [P in keyof T & keyof AggregateNotebook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotebook[P]>
      : GetScalarType<T[P], AggregateNotebook[P]>
  }




  export type NotebookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotebookWhereInput
    orderBy?: NotebookOrderByWithAggregationInput | NotebookOrderByWithAggregationInput[]
    by: NotebookScalarFieldEnum[] | NotebookScalarFieldEnum
    having?: NotebookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotebookCountAggregateInputType | true
    _min?: NotebookMinAggregateInputType
    _max?: NotebookMaxAggregateInputType
  }

  export type NotebookGroupByOutputType = {
    id: string
    title: string
    color: string | null
    createdAt: Date
    updatedAt: Date
    _count: NotebookCountAggregateOutputType | null
    _min: NotebookMinAggregateOutputType | null
    _max: NotebookMaxAggregateOutputType | null
  }

  type GetNotebookGroupByPayload<T extends NotebookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotebookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotebookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotebookGroupByOutputType[P]>
            : GetScalarType<T[P], NotebookGroupByOutputType[P]>
        }
      >
    >


  export type NotebookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sectionGroups?: boolean | Notebook$sectionGroupsArgs<ExtArgs>
    sections?: boolean | Notebook$sectionsArgs<ExtArgs>
    _count?: boolean | NotebookCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notebook"]>

  export type NotebookSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["notebook"]>

  export type NotebookSelectScalar = {
    id?: boolean
    title?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotebookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sectionGroups?: boolean | Notebook$sectionGroupsArgs<ExtArgs>
    sections?: boolean | Notebook$sectionsArgs<ExtArgs>
    _count?: boolean | NotebookCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NotebookIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $NotebookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notebook"
    objects: {
      sectionGroups: Prisma.$SectionGroupPayload<ExtArgs>[]
      sections: Prisma.$SectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      color: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notebook"]>
    composites: {}
  }

  type NotebookGetPayload<S extends boolean | null | undefined | NotebookDefaultArgs> = $Result.GetResult<Prisma.$NotebookPayload, S>

  type NotebookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotebookFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotebookCountAggregateInputType | true
    }

  export interface NotebookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notebook'], meta: { name: 'Notebook' } }
    /**
     * Find zero or one Notebook that matches the filter.
     * @param {NotebookFindUniqueArgs} args - Arguments to find a Notebook
     * @example
     * // Get one Notebook
     * const notebook = await prisma.notebook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotebookFindUniqueArgs>(args: SelectSubset<T, NotebookFindUniqueArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notebook that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotebookFindUniqueOrThrowArgs} args - Arguments to find a Notebook
     * @example
     * // Get one Notebook
     * const notebook = await prisma.notebook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotebookFindUniqueOrThrowArgs>(args: SelectSubset<T, NotebookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notebook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotebookFindFirstArgs} args - Arguments to find a Notebook
     * @example
     * // Get one Notebook
     * const notebook = await prisma.notebook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotebookFindFirstArgs>(args?: SelectSubset<T, NotebookFindFirstArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notebook that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotebookFindFirstOrThrowArgs} args - Arguments to find a Notebook
     * @example
     * // Get one Notebook
     * const notebook = await prisma.notebook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotebookFindFirstOrThrowArgs>(args?: SelectSubset<T, NotebookFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notebooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotebookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notebooks
     * const notebooks = await prisma.notebook.findMany()
     * 
     * // Get first 10 Notebooks
     * const notebooks = await prisma.notebook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notebookWithIdOnly = await prisma.notebook.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotebookFindManyArgs>(args?: SelectSubset<T, NotebookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notebook.
     * @param {NotebookCreateArgs} args - Arguments to create a Notebook.
     * @example
     * // Create one Notebook
     * const Notebook = await prisma.notebook.create({
     *   data: {
     *     // ... data to create a Notebook
     *   }
     * })
     * 
     */
    create<T extends NotebookCreateArgs>(args: SelectSubset<T, NotebookCreateArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notebooks.
     * @param {NotebookCreateManyArgs} args - Arguments to create many Notebooks.
     * @example
     * // Create many Notebooks
     * const notebook = await prisma.notebook.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotebookCreateManyArgs>(args?: SelectSubset<T, NotebookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notebooks and returns the data saved in the database.
     * @param {NotebookCreateManyAndReturnArgs} args - Arguments to create many Notebooks.
     * @example
     * // Create many Notebooks
     * const notebook = await prisma.notebook.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notebooks and only return the `id`
     * const notebookWithIdOnly = await prisma.notebook.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotebookCreateManyAndReturnArgs>(args?: SelectSubset<T, NotebookCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notebook.
     * @param {NotebookDeleteArgs} args - Arguments to delete one Notebook.
     * @example
     * // Delete one Notebook
     * const Notebook = await prisma.notebook.delete({
     *   where: {
     *     // ... filter to delete one Notebook
     *   }
     * })
     * 
     */
    delete<T extends NotebookDeleteArgs>(args: SelectSubset<T, NotebookDeleteArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notebook.
     * @param {NotebookUpdateArgs} args - Arguments to update one Notebook.
     * @example
     * // Update one Notebook
     * const notebook = await prisma.notebook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotebookUpdateArgs>(args: SelectSubset<T, NotebookUpdateArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notebooks.
     * @param {NotebookDeleteManyArgs} args - Arguments to filter Notebooks to delete.
     * @example
     * // Delete a few Notebooks
     * const { count } = await prisma.notebook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotebookDeleteManyArgs>(args?: SelectSubset<T, NotebookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notebooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotebookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notebooks
     * const notebook = await prisma.notebook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotebookUpdateManyArgs>(args: SelectSubset<T, NotebookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notebook.
     * @param {NotebookUpsertArgs} args - Arguments to update or create a Notebook.
     * @example
     * // Update or create a Notebook
     * const notebook = await prisma.notebook.upsert({
     *   create: {
     *     // ... data to create a Notebook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notebook we want to update
     *   }
     * })
     */
    upsert<T extends NotebookUpsertArgs>(args: SelectSubset<T, NotebookUpsertArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notebooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotebookCountArgs} args - Arguments to filter Notebooks to count.
     * @example
     * // Count the number of Notebooks
     * const count = await prisma.notebook.count({
     *   where: {
     *     // ... the filter for the Notebooks we want to count
     *   }
     * })
    **/
    count<T extends NotebookCountArgs>(
      args?: Subset<T, NotebookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotebookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notebook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotebookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotebookAggregateArgs>(args: Subset<T, NotebookAggregateArgs>): Prisma.PrismaPromise<GetNotebookAggregateType<T>>

    /**
     * Group by Notebook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotebookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotebookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotebookGroupByArgs['orderBy'] }
        : { orderBy?: NotebookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotebookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotebookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notebook model
   */
  readonly fields: NotebookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notebook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotebookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sectionGroups<T extends Notebook$sectionGroupsArgs<ExtArgs> = {}>(args?: Subset<T, Notebook$sectionGroupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "findMany"> | Null>
    sections<T extends Notebook$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, Notebook$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notebook model
   */ 
  interface NotebookFieldRefs {
    readonly id: FieldRef<"Notebook", 'String'>
    readonly title: FieldRef<"Notebook", 'String'>
    readonly color: FieldRef<"Notebook", 'String'>
    readonly createdAt: FieldRef<"Notebook", 'DateTime'>
    readonly updatedAt: FieldRef<"Notebook", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notebook findUnique
   */
  export type NotebookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
    /**
     * Filter, which Notebook to fetch.
     */
    where: NotebookWhereUniqueInput
  }

  /**
   * Notebook findUniqueOrThrow
   */
  export type NotebookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
    /**
     * Filter, which Notebook to fetch.
     */
    where: NotebookWhereUniqueInput
  }

  /**
   * Notebook findFirst
   */
  export type NotebookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
    /**
     * Filter, which Notebook to fetch.
     */
    where?: NotebookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notebooks to fetch.
     */
    orderBy?: NotebookOrderByWithRelationInput | NotebookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notebooks.
     */
    cursor?: NotebookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notebooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notebooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notebooks.
     */
    distinct?: NotebookScalarFieldEnum | NotebookScalarFieldEnum[]
  }

  /**
   * Notebook findFirstOrThrow
   */
  export type NotebookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
    /**
     * Filter, which Notebook to fetch.
     */
    where?: NotebookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notebooks to fetch.
     */
    orderBy?: NotebookOrderByWithRelationInput | NotebookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notebooks.
     */
    cursor?: NotebookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notebooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notebooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notebooks.
     */
    distinct?: NotebookScalarFieldEnum | NotebookScalarFieldEnum[]
  }

  /**
   * Notebook findMany
   */
  export type NotebookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
    /**
     * Filter, which Notebooks to fetch.
     */
    where?: NotebookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notebooks to fetch.
     */
    orderBy?: NotebookOrderByWithRelationInput | NotebookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notebooks.
     */
    cursor?: NotebookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notebooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notebooks.
     */
    skip?: number
    distinct?: NotebookScalarFieldEnum | NotebookScalarFieldEnum[]
  }

  /**
   * Notebook create
   */
  export type NotebookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
    /**
     * The data needed to create a Notebook.
     */
    data: XOR<NotebookCreateInput, NotebookUncheckedCreateInput>
  }

  /**
   * Notebook createMany
   */
  export type NotebookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notebooks.
     */
    data: NotebookCreateManyInput | NotebookCreateManyInput[]
  }

  /**
   * Notebook createManyAndReturn
   */
  export type NotebookCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notebooks.
     */
    data: NotebookCreateManyInput | NotebookCreateManyInput[]
  }

  /**
   * Notebook update
   */
  export type NotebookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
    /**
     * The data needed to update a Notebook.
     */
    data: XOR<NotebookUpdateInput, NotebookUncheckedUpdateInput>
    /**
     * Choose, which Notebook to update.
     */
    where: NotebookWhereUniqueInput
  }

  /**
   * Notebook updateMany
   */
  export type NotebookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notebooks.
     */
    data: XOR<NotebookUpdateManyMutationInput, NotebookUncheckedUpdateManyInput>
    /**
     * Filter which Notebooks to update
     */
    where?: NotebookWhereInput
  }

  /**
   * Notebook upsert
   */
  export type NotebookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
    /**
     * The filter to search for the Notebook to update in case it exists.
     */
    where: NotebookWhereUniqueInput
    /**
     * In case the Notebook found by the `where` argument doesn't exist, create a new Notebook with this data.
     */
    create: XOR<NotebookCreateInput, NotebookUncheckedCreateInput>
    /**
     * In case the Notebook was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotebookUpdateInput, NotebookUncheckedUpdateInput>
  }

  /**
   * Notebook delete
   */
  export type NotebookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
    /**
     * Filter which Notebook to delete.
     */
    where: NotebookWhereUniqueInput
  }

  /**
   * Notebook deleteMany
   */
  export type NotebookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notebooks to delete
     */
    where?: NotebookWhereInput
  }

  /**
   * Notebook.sectionGroups
   */
  export type Notebook$sectionGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    where?: SectionGroupWhereInput
    orderBy?: SectionGroupOrderByWithRelationInput | SectionGroupOrderByWithRelationInput[]
    cursor?: SectionGroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionGroupScalarFieldEnum | SectionGroupScalarFieldEnum[]
  }

  /**
   * Notebook.sections
   */
  export type Notebook$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Notebook without action
   */
  export type NotebookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notebook
     */
    select?: NotebookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotebookInclude<ExtArgs> | null
  }


  /**
   * Model SectionGroup
   */

  export type AggregateSectionGroup = {
    _count: SectionGroupCountAggregateOutputType | null
    _min: SectionGroupMinAggregateOutputType | null
    _max: SectionGroupMaxAggregateOutputType | null
  }

  export type SectionGroupMinAggregateOutputType = {
    id: string | null
    title: string | null
    notebookId: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SectionGroupMaxAggregateOutputType = {
    id: string | null
    title: string | null
    notebookId: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SectionGroupCountAggregateOutputType = {
    id: number
    title: number
    notebookId: number
    parentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SectionGroupMinAggregateInputType = {
    id?: true
    title?: true
    notebookId?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SectionGroupMaxAggregateInputType = {
    id?: true
    title?: true
    notebookId?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SectionGroupCountAggregateInputType = {
    id?: true
    title?: true
    notebookId?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SectionGroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SectionGroup to aggregate.
     */
    where?: SectionGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionGroups to fetch.
     */
    orderBy?: SectionGroupOrderByWithRelationInput | SectionGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SectionGroups
    **/
    _count?: true | SectionGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionGroupMaxAggregateInputType
  }

  export type GetSectionGroupAggregateType<T extends SectionGroupAggregateArgs> = {
        [P in keyof T & keyof AggregateSectionGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSectionGroup[P]>
      : GetScalarType<T[P], AggregateSectionGroup[P]>
  }




  export type SectionGroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionGroupWhereInput
    orderBy?: SectionGroupOrderByWithAggregationInput | SectionGroupOrderByWithAggregationInput[]
    by: SectionGroupScalarFieldEnum[] | SectionGroupScalarFieldEnum
    having?: SectionGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionGroupCountAggregateInputType | true
    _min?: SectionGroupMinAggregateInputType
    _max?: SectionGroupMaxAggregateInputType
  }

  export type SectionGroupGroupByOutputType = {
    id: string
    title: string
    notebookId: string
    parentId: string | null
    createdAt: Date
    updatedAt: Date
    _count: SectionGroupCountAggregateOutputType | null
    _min: SectionGroupMinAggregateOutputType | null
    _max: SectionGroupMaxAggregateOutputType | null
  }

  type GetSectionGroupGroupByPayload<T extends SectionGroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupGroupByOutputType[P]>
        }
      >
    >


  export type SectionGroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    notebookId?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notebook?: boolean | NotebookDefaultArgs<ExtArgs>
    parent?: boolean | SectionGroup$parentArgs<ExtArgs>
    children?: boolean | SectionGroup$childrenArgs<ExtArgs>
    sections?: boolean | SectionGroup$sectionsArgs<ExtArgs>
    _count?: boolean | SectionGroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sectionGroup"]>

  export type SectionGroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    notebookId?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notebook?: boolean | NotebookDefaultArgs<ExtArgs>
    parent?: boolean | SectionGroup$parentArgs<ExtArgs>
  }, ExtArgs["result"]["sectionGroup"]>

  export type SectionGroupSelectScalar = {
    id?: boolean
    title?: boolean
    notebookId?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SectionGroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notebook?: boolean | NotebookDefaultArgs<ExtArgs>
    parent?: boolean | SectionGroup$parentArgs<ExtArgs>
    children?: boolean | SectionGroup$childrenArgs<ExtArgs>
    sections?: boolean | SectionGroup$sectionsArgs<ExtArgs>
    _count?: boolean | SectionGroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SectionGroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notebook?: boolean | NotebookDefaultArgs<ExtArgs>
    parent?: boolean | SectionGroup$parentArgs<ExtArgs>
  }

  export type $SectionGroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SectionGroup"
    objects: {
      notebook: Prisma.$NotebookPayload<ExtArgs>
      parent: Prisma.$SectionGroupPayload<ExtArgs> | null
      children: Prisma.$SectionGroupPayload<ExtArgs>[]
      sections: Prisma.$SectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      notebookId: string
      parentId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sectionGroup"]>
    composites: {}
  }

  type SectionGroupGetPayload<S extends boolean | null | undefined | SectionGroupDefaultArgs> = $Result.GetResult<Prisma.$SectionGroupPayload, S>

  type SectionGroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SectionGroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SectionGroupCountAggregateInputType | true
    }

  export interface SectionGroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SectionGroup'], meta: { name: 'SectionGroup' } }
    /**
     * Find zero or one SectionGroup that matches the filter.
     * @param {SectionGroupFindUniqueArgs} args - Arguments to find a SectionGroup
     * @example
     * // Get one SectionGroup
     * const sectionGroup = await prisma.sectionGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionGroupFindUniqueArgs>(args: SelectSubset<T, SectionGroupFindUniqueArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SectionGroup that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SectionGroupFindUniqueOrThrowArgs} args - Arguments to find a SectionGroup
     * @example
     * // Get one SectionGroup
     * const sectionGroup = await prisma.sectionGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionGroupFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SectionGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupFindFirstArgs} args - Arguments to find a SectionGroup
     * @example
     * // Get one SectionGroup
     * const sectionGroup = await prisma.sectionGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionGroupFindFirstArgs>(args?: SelectSubset<T, SectionGroupFindFirstArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SectionGroup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupFindFirstOrThrowArgs} args - Arguments to find a SectionGroup
     * @example
     * // Get one SectionGroup
     * const sectionGroup = await prisma.sectionGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionGroupFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SectionGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SectionGroups
     * const sectionGroups = await prisma.sectionGroup.findMany()
     * 
     * // Get first 10 SectionGroups
     * const sectionGroups = await prisma.sectionGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionGroupWithIdOnly = await prisma.sectionGroup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionGroupFindManyArgs>(args?: SelectSubset<T, SectionGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SectionGroup.
     * @param {SectionGroupCreateArgs} args - Arguments to create a SectionGroup.
     * @example
     * // Create one SectionGroup
     * const SectionGroup = await prisma.sectionGroup.create({
     *   data: {
     *     // ... data to create a SectionGroup
     *   }
     * })
     * 
     */
    create<T extends SectionGroupCreateArgs>(args: SelectSubset<T, SectionGroupCreateArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SectionGroups.
     * @param {SectionGroupCreateManyArgs} args - Arguments to create many SectionGroups.
     * @example
     * // Create many SectionGroups
     * const sectionGroup = await prisma.sectionGroup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionGroupCreateManyArgs>(args?: SelectSubset<T, SectionGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SectionGroups and returns the data saved in the database.
     * @param {SectionGroupCreateManyAndReturnArgs} args - Arguments to create many SectionGroups.
     * @example
     * // Create many SectionGroups
     * const sectionGroup = await prisma.sectionGroup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SectionGroups and only return the `id`
     * const sectionGroupWithIdOnly = await prisma.sectionGroup.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SectionGroupCreateManyAndReturnArgs>(args?: SelectSubset<T, SectionGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SectionGroup.
     * @param {SectionGroupDeleteArgs} args - Arguments to delete one SectionGroup.
     * @example
     * // Delete one SectionGroup
     * const SectionGroup = await prisma.sectionGroup.delete({
     *   where: {
     *     // ... filter to delete one SectionGroup
     *   }
     * })
     * 
     */
    delete<T extends SectionGroupDeleteArgs>(args: SelectSubset<T, SectionGroupDeleteArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SectionGroup.
     * @param {SectionGroupUpdateArgs} args - Arguments to update one SectionGroup.
     * @example
     * // Update one SectionGroup
     * const sectionGroup = await prisma.sectionGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionGroupUpdateArgs>(args: SelectSubset<T, SectionGroupUpdateArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SectionGroups.
     * @param {SectionGroupDeleteManyArgs} args - Arguments to filter SectionGroups to delete.
     * @example
     * // Delete a few SectionGroups
     * const { count } = await prisma.sectionGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionGroupDeleteManyArgs>(args?: SelectSubset<T, SectionGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SectionGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SectionGroups
     * const sectionGroup = await prisma.sectionGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionGroupUpdateManyArgs>(args: SelectSubset<T, SectionGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SectionGroup.
     * @param {SectionGroupUpsertArgs} args - Arguments to update or create a SectionGroup.
     * @example
     * // Update or create a SectionGroup
     * const sectionGroup = await prisma.sectionGroup.upsert({
     *   create: {
     *     // ... data to create a SectionGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SectionGroup we want to update
     *   }
     * })
     */
    upsert<T extends SectionGroupUpsertArgs>(args: SelectSubset<T, SectionGroupUpsertArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SectionGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupCountArgs} args - Arguments to filter SectionGroups to count.
     * @example
     * // Count the number of SectionGroups
     * const count = await prisma.sectionGroup.count({
     *   where: {
     *     // ... the filter for the SectionGroups we want to count
     *   }
     * })
    **/
    count<T extends SectionGroupCountArgs>(
      args?: Subset<T, SectionGroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SectionGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionGroupAggregateArgs>(args: Subset<T, SectionGroupAggregateArgs>): Prisma.PrismaPromise<GetSectionGroupAggregateType<T>>

    /**
     * Group by SectionGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SectionGroup model
   */
  readonly fields: SectionGroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SectionGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionGroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notebook<T extends NotebookDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotebookDefaultArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parent<T extends SectionGroup$parentArgs<ExtArgs> = {}>(args?: Subset<T, SectionGroup$parentArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends SectionGroup$childrenArgs<ExtArgs> = {}>(args?: Subset<T, SectionGroup$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "findMany"> | Null>
    sections<T extends SectionGroup$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, SectionGroup$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SectionGroup model
   */ 
  interface SectionGroupFieldRefs {
    readonly id: FieldRef<"SectionGroup", 'String'>
    readonly title: FieldRef<"SectionGroup", 'String'>
    readonly notebookId: FieldRef<"SectionGroup", 'String'>
    readonly parentId: FieldRef<"SectionGroup", 'String'>
    readonly createdAt: FieldRef<"SectionGroup", 'DateTime'>
    readonly updatedAt: FieldRef<"SectionGroup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SectionGroup findUnique
   */
  export type SectionGroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    /**
     * Filter, which SectionGroup to fetch.
     */
    where: SectionGroupWhereUniqueInput
  }

  /**
   * SectionGroup findUniqueOrThrow
   */
  export type SectionGroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    /**
     * Filter, which SectionGroup to fetch.
     */
    where: SectionGroupWhereUniqueInput
  }

  /**
   * SectionGroup findFirst
   */
  export type SectionGroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    /**
     * Filter, which SectionGroup to fetch.
     */
    where?: SectionGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionGroups to fetch.
     */
    orderBy?: SectionGroupOrderByWithRelationInput | SectionGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SectionGroups.
     */
    cursor?: SectionGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SectionGroups.
     */
    distinct?: SectionGroupScalarFieldEnum | SectionGroupScalarFieldEnum[]
  }

  /**
   * SectionGroup findFirstOrThrow
   */
  export type SectionGroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    /**
     * Filter, which SectionGroup to fetch.
     */
    where?: SectionGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionGroups to fetch.
     */
    orderBy?: SectionGroupOrderByWithRelationInput | SectionGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SectionGroups.
     */
    cursor?: SectionGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SectionGroups.
     */
    distinct?: SectionGroupScalarFieldEnum | SectionGroupScalarFieldEnum[]
  }

  /**
   * SectionGroup findMany
   */
  export type SectionGroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    /**
     * Filter, which SectionGroups to fetch.
     */
    where?: SectionGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionGroups to fetch.
     */
    orderBy?: SectionGroupOrderByWithRelationInput | SectionGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SectionGroups.
     */
    cursor?: SectionGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionGroups.
     */
    skip?: number
    distinct?: SectionGroupScalarFieldEnum | SectionGroupScalarFieldEnum[]
  }

  /**
   * SectionGroup create
   */
  export type SectionGroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    /**
     * The data needed to create a SectionGroup.
     */
    data: XOR<SectionGroupCreateInput, SectionGroupUncheckedCreateInput>
  }

  /**
   * SectionGroup createMany
   */
  export type SectionGroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SectionGroups.
     */
    data: SectionGroupCreateManyInput | SectionGroupCreateManyInput[]
  }

  /**
   * SectionGroup createManyAndReturn
   */
  export type SectionGroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SectionGroups.
     */
    data: SectionGroupCreateManyInput | SectionGroupCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SectionGroup update
   */
  export type SectionGroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    /**
     * The data needed to update a SectionGroup.
     */
    data: XOR<SectionGroupUpdateInput, SectionGroupUncheckedUpdateInput>
    /**
     * Choose, which SectionGroup to update.
     */
    where: SectionGroupWhereUniqueInput
  }

  /**
   * SectionGroup updateMany
   */
  export type SectionGroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SectionGroups.
     */
    data: XOR<SectionGroupUpdateManyMutationInput, SectionGroupUncheckedUpdateManyInput>
    /**
     * Filter which SectionGroups to update
     */
    where?: SectionGroupWhereInput
  }

  /**
   * SectionGroup upsert
   */
  export type SectionGroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    /**
     * The filter to search for the SectionGroup to update in case it exists.
     */
    where: SectionGroupWhereUniqueInput
    /**
     * In case the SectionGroup found by the `where` argument doesn't exist, create a new SectionGroup with this data.
     */
    create: XOR<SectionGroupCreateInput, SectionGroupUncheckedCreateInput>
    /**
     * In case the SectionGroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionGroupUpdateInput, SectionGroupUncheckedUpdateInput>
  }

  /**
   * SectionGroup delete
   */
  export type SectionGroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    /**
     * Filter which SectionGroup to delete.
     */
    where: SectionGroupWhereUniqueInput
  }

  /**
   * SectionGroup deleteMany
   */
  export type SectionGroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SectionGroups to delete
     */
    where?: SectionGroupWhereInput
  }

  /**
   * SectionGroup.parent
   */
  export type SectionGroup$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    where?: SectionGroupWhereInput
  }

  /**
   * SectionGroup.children
   */
  export type SectionGroup$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    where?: SectionGroupWhereInput
    orderBy?: SectionGroupOrderByWithRelationInput | SectionGroupOrderByWithRelationInput[]
    cursor?: SectionGroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionGroupScalarFieldEnum | SectionGroupScalarFieldEnum[]
  }

  /**
   * SectionGroup.sections
   */
  export type SectionGroup$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * SectionGroup without action
   */
  export type SectionGroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
  }


  /**
   * Model Section
   */

  export type AggregateSection = {
    _count: SectionCountAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  export type SectionMinAggregateOutputType = {
    id: string | null
    title: string | null
    notebookId: string | null
    sectionGroupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SectionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    notebookId: string | null
    sectionGroupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SectionCountAggregateOutputType = {
    id: number
    title: number
    notebookId: number
    sectionGroupId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SectionMinAggregateInputType = {
    id?: true
    title?: true
    notebookId?: true
    sectionGroupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SectionMaxAggregateInputType = {
    id?: true
    title?: true
    notebookId?: true
    sectionGroupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SectionCountAggregateInputType = {
    id?: true
    title?: true
    notebookId?: true
    sectionGroupId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Section to aggregate.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionMaxAggregateInputType
  }

  export type GetSectionAggregateType<T extends SectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSection[P]>
      : GetScalarType<T[P], AggregateSection[P]>
  }




  export type SectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithAggregationInput | SectionOrderByWithAggregationInput[]
    by: SectionScalarFieldEnum[] | SectionScalarFieldEnum
    having?: SectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCountAggregateInputType | true
    _min?: SectionMinAggregateInputType
    _max?: SectionMaxAggregateInputType
  }

  export type SectionGroupByOutputType = {
    id: string
    title: string
    notebookId: string
    sectionGroupId: string | null
    createdAt: Date
    updatedAt: Date
    _count: SectionCountAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  type GetSectionGroupByPayload<T extends SectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupByOutputType[P]>
        }
      >
    >


  export type SectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    notebookId?: boolean
    sectionGroupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notebook?: boolean | NotebookDefaultArgs<ExtArgs>
    sectionGroup?: boolean | Section$sectionGroupArgs<ExtArgs>
    pages?: boolean | Section$pagesArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    notebookId?: boolean
    sectionGroupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notebook?: boolean | NotebookDefaultArgs<ExtArgs>
    sectionGroup?: boolean | Section$sectionGroupArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectScalar = {
    id?: boolean
    title?: boolean
    notebookId?: boolean
    sectionGroupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notebook?: boolean | NotebookDefaultArgs<ExtArgs>
    sectionGroup?: boolean | Section$sectionGroupArgs<ExtArgs>
    pages?: boolean | Section$pagesArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notebook?: boolean | NotebookDefaultArgs<ExtArgs>
    sectionGroup?: boolean | Section$sectionGroupArgs<ExtArgs>
  }

  export type $SectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Section"
    objects: {
      notebook: Prisma.$NotebookPayload<ExtArgs>
      sectionGroup: Prisma.$SectionGroupPayload<ExtArgs> | null
      pages: Prisma.$PagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      notebookId: string
      sectionGroupId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["section"]>
    composites: {}
  }

  type SectionGetPayload<S extends boolean | null | undefined | SectionDefaultArgs> = $Result.GetResult<Prisma.$SectionPayload, S>

  type SectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SectionCountAggregateInputType | true
    }

  export interface SectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Section'], meta: { name: 'Section' } }
    /**
     * Find zero or one Section that matches the filter.
     * @param {SectionFindUniqueArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionFindUniqueArgs>(args: SelectSubset<T, SectionFindUniqueArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Section that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SectionFindUniqueOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Section that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionFindFirstArgs>(args?: SelectSubset<T, SectionFindFirstArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Section that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.section.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.section.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionWithIdOnly = await prisma.section.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionFindManyArgs>(args?: SelectSubset<T, SectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Section.
     * @param {SectionCreateArgs} args - Arguments to create a Section.
     * @example
     * // Create one Section
     * const Section = await prisma.section.create({
     *   data: {
     *     // ... data to create a Section
     *   }
     * })
     * 
     */
    create<T extends SectionCreateArgs>(args: SelectSubset<T, SectionCreateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sections.
     * @param {SectionCreateManyArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionCreateManyArgs>(args?: SelectSubset<T, SectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sections and returns the data saved in the database.
     * @param {SectionCreateManyAndReturnArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SectionCreateManyAndReturnArgs>(args?: SelectSubset<T, SectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Section.
     * @param {SectionDeleteArgs} args - Arguments to delete one Section.
     * @example
     * // Delete one Section
     * const Section = await prisma.section.delete({
     *   where: {
     *     // ... filter to delete one Section
     *   }
     * })
     * 
     */
    delete<T extends SectionDeleteArgs>(args: SelectSubset<T, SectionDeleteArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Section.
     * @param {SectionUpdateArgs} args - Arguments to update one Section.
     * @example
     * // Update one Section
     * const section = await prisma.section.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionUpdateArgs>(args: SelectSubset<T, SectionUpdateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sections.
     * @param {SectionDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.section.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionDeleteManyArgs>(args?: SelectSubset<T, SectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionUpdateManyArgs>(args: SelectSubset<T, SectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Section.
     * @param {SectionUpsertArgs} args - Arguments to update or create a Section.
     * @example
     * // Update or create a Section
     * const section = await prisma.section.upsert({
     *   create: {
     *     // ... data to create a Section
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Section we want to update
     *   }
     * })
     */
    upsert<T extends SectionUpsertArgs>(args: SelectSubset<T, SectionUpsertArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.section.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionCountArgs>(
      args?: Subset<T, SectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionAggregateArgs>(args: Subset<T, SectionAggregateArgs>): Prisma.PrismaPromise<GetSectionAggregateType<T>>

    /**
     * Group by Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Section model
   */
  readonly fields: SectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Section.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notebook<T extends NotebookDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotebookDefaultArgs<ExtArgs>>): Prisma__NotebookClient<$Result.GetResult<Prisma.$NotebookPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sectionGroup<T extends Section$sectionGroupArgs<ExtArgs> = {}>(args?: Subset<T, Section$sectionGroupArgs<ExtArgs>>): Prisma__SectionGroupClient<$Result.GetResult<Prisma.$SectionGroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    pages<T extends Section$pagesArgs<ExtArgs> = {}>(args?: Subset<T, Section$pagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Section model
   */ 
  interface SectionFieldRefs {
    readonly id: FieldRef<"Section", 'String'>
    readonly title: FieldRef<"Section", 'String'>
    readonly notebookId: FieldRef<"Section", 'String'>
    readonly sectionGroupId: FieldRef<"Section", 'String'>
    readonly createdAt: FieldRef<"Section", 'DateTime'>
    readonly updatedAt: FieldRef<"Section", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Section findUnique
   */
  export type SectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findUniqueOrThrow
   */
  export type SectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findFirst
   */
  export type SectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findFirstOrThrow
   */
  export type SectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findMany
   */
  export type SectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Sections to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section create
   */
  export type SectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Section.
     */
    data: XOR<SectionCreateInput, SectionUncheckedCreateInput>
  }

  /**
   * Section createMany
   */
  export type SectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
  }

  /**
   * Section createManyAndReturn
   */
  export type SectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section update
   */
  export type SectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Section.
     */
    data: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
    /**
     * Choose, which Section to update.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section updateMany
   */
  export type SectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
  }

  /**
   * Section upsert
   */
  export type SectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Section to update in case it exists.
     */
    where: SectionWhereUniqueInput
    /**
     * In case the Section found by the `where` argument doesn't exist, create a new Section with this data.
     */
    create: XOR<SectionCreateInput, SectionUncheckedCreateInput>
    /**
     * In case the Section was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
  }

  /**
   * Section delete
   */
  export type SectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter which Section to delete.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section deleteMany
   */
  export type SectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sections to delete
     */
    where?: SectionWhereInput
  }

  /**
   * Section.sectionGroup
   */
  export type Section$sectionGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionGroup
     */
    select?: SectionGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionGroupInclude<ExtArgs> | null
    where?: SectionGroupWhereInput
  }

  /**
   * Section.pages
   */
  export type Section$pagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    where?: PageWhereInput
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    cursor?: PageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Section without action
   */
  export type SectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
  }


  /**
   * Model Page
   */

  export type AggregatePage = {
    _count: PageCountAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  export type PageMinAggregateOutputType = {
    id: string | null
    title: string | null
    sectionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageMaxAggregateOutputType = {
    id: string | null
    title: string | null
    sectionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageCountAggregateOutputType = {
    id: number
    title: number
    sectionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PageMinAggregateInputType = {
    id?: true
    title?: true
    sectionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageMaxAggregateInputType = {
    id?: true
    title?: true
    sectionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageCountAggregateInputType = {
    id?: true
    title?: true
    sectionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Page to aggregate.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pages
    **/
    _count?: true | PageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageMaxAggregateInputType
  }

  export type GetPageAggregateType<T extends PageAggregateArgs> = {
        [P in keyof T & keyof AggregatePage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePage[P]>
      : GetScalarType<T[P], AggregatePage[P]>
  }




  export type PageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageWhereInput
    orderBy?: PageOrderByWithAggregationInput | PageOrderByWithAggregationInput[]
    by: PageScalarFieldEnum[] | PageScalarFieldEnum
    having?: PageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageCountAggregateInputType | true
    _min?: PageMinAggregateInputType
    _max?: PageMaxAggregateInputType
  }

  export type PageGroupByOutputType = {
    id: string
    title: string
    sectionId: string
    createdAt: Date
    updatedAt: Date
    _count: PageCountAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  type GetPageGroupByPayload<T extends PageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageGroupByOutputType[P]>
            : GetScalarType<T[P], PageGroupByOutputType[P]>
        }
      >
    >


  export type PageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    sectionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
    components?: boolean | Page$componentsArgs<ExtArgs>
    _count?: boolean | PageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["page"]>

  export type PageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    sectionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["page"]>

  export type PageSelectScalar = {
    id?: boolean
    title?: boolean
    sectionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
    components?: boolean | Page$componentsArgs<ExtArgs>
    _count?: boolean | PageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }

  export type $PagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Page"
    objects: {
      section: Prisma.$SectionPayload<ExtArgs>
      components: Prisma.$PageComponentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      sectionId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["page"]>
    composites: {}
  }

  type PageGetPayload<S extends boolean | null | undefined | PageDefaultArgs> = $Result.GetResult<Prisma.$PagePayload, S>

  type PageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PageCountAggregateInputType | true
    }

  export interface PageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Page'], meta: { name: 'Page' } }
    /**
     * Find zero or one Page that matches the filter.
     * @param {PageFindUniqueArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PageFindUniqueArgs>(args: SelectSubset<T, PageFindUniqueArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Page that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PageFindUniqueOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PageFindUniqueOrThrowArgs>(args: SelectSubset<T, PageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Page that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PageFindFirstArgs>(args?: SelectSubset<T, PageFindFirstArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Page that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PageFindFirstOrThrowArgs>(args?: SelectSubset<T, PageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pages
     * const pages = await prisma.page.findMany()
     * 
     * // Get first 10 Pages
     * const pages = await prisma.page.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageWithIdOnly = await prisma.page.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PageFindManyArgs>(args?: SelectSubset<T, PageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Page.
     * @param {PageCreateArgs} args - Arguments to create a Page.
     * @example
     * // Create one Page
     * const Page = await prisma.page.create({
     *   data: {
     *     // ... data to create a Page
     *   }
     * })
     * 
     */
    create<T extends PageCreateArgs>(args: SelectSubset<T, PageCreateArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pages.
     * @param {PageCreateManyArgs} args - Arguments to create many Pages.
     * @example
     * // Create many Pages
     * const page = await prisma.page.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PageCreateManyArgs>(args?: SelectSubset<T, PageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pages and returns the data saved in the database.
     * @param {PageCreateManyAndReturnArgs} args - Arguments to create many Pages.
     * @example
     * // Create many Pages
     * const page = await prisma.page.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pages and only return the `id`
     * const pageWithIdOnly = await prisma.page.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PageCreateManyAndReturnArgs>(args?: SelectSubset<T, PageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Page.
     * @param {PageDeleteArgs} args - Arguments to delete one Page.
     * @example
     * // Delete one Page
     * const Page = await prisma.page.delete({
     *   where: {
     *     // ... filter to delete one Page
     *   }
     * })
     * 
     */
    delete<T extends PageDeleteArgs>(args: SelectSubset<T, PageDeleteArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Page.
     * @param {PageUpdateArgs} args - Arguments to update one Page.
     * @example
     * // Update one Page
     * const page = await prisma.page.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PageUpdateArgs>(args: SelectSubset<T, PageUpdateArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pages.
     * @param {PageDeleteManyArgs} args - Arguments to filter Pages to delete.
     * @example
     * // Delete a few Pages
     * const { count } = await prisma.page.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PageDeleteManyArgs>(args?: SelectSubset<T, PageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pages
     * const page = await prisma.page.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PageUpdateManyArgs>(args: SelectSubset<T, PageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Page.
     * @param {PageUpsertArgs} args - Arguments to update or create a Page.
     * @example
     * // Update or create a Page
     * const page = await prisma.page.upsert({
     *   create: {
     *     // ... data to create a Page
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Page we want to update
     *   }
     * })
     */
    upsert<T extends PageUpsertArgs>(args: SelectSubset<T, PageUpsertArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageCountArgs} args - Arguments to filter Pages to count.
     * @example
     * // Count the number of Pages
     * const count = await prisma.page.count({
     *   where: {
     *     // ... the filter for the Pages we want to count
     *   }
     * })
    **/
    count<T extends PageCountArgs>(
      args?: Subset<T, PageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageAggregateArgs>(args: Subset<T, PageAggregateArgs>): Prisma.PrismaPromise<GetPageAggregateType<T>>

    /**
     * Group by Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageGroupByArgs['orderBy'] }
        : { orderBy?: PageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Page model
   */
  readonly fields: PageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Page.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    section<T extends SectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectionDefaultArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    components<T extends Page$componentsArgs<ExtArgs> = {}>(args?: Subset<T, Page$componentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Page model
   */ 
  interface PageFieldRefs {
    readonly id: FieldRef<"Page", 'String'>
    readonly title: FieldRef<"Page", 'String'>
    readonly sectionId: FieldRef<"Page", 'String'>
    readonly createdAt: FieldRef<"Page", 'DateTime'>
    readonly updatedAt: FieldRef<"Page", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Page findUnique
   */
  export type PageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page findUniqueOrThrow
   */
  export type PageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page findFirst
   */
  export type PageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page findFirstOrThrow
   */
  export type PageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page findMany
   */
  export type PageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Pages to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page create
   */
  export type PageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * The data needed to create a Page.
     */
    data: XOR<PageCreateInput, PageUncheckedCreateInput>
  }

  /**
   * Page createMany
   */
  export type PageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pages.
     */
    data: PageCreateManyInput | PageCreateManyInput[]
  }

  /**
   * Page createManyAndReturn
   */
  export type PageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Pages.
     */
    data: PageCreateManyInput | PageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Page update
   */
  export type PageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * The data needed to update a Page.
     */
    data: XOR<PageUpdateInput, PageUncheckedUpdateInput>
    /**
     * Choose, which Page to update.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page updateMany
   */
  export type PageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pages.
     */
    data: XOR<PageUpdateManyMutationInput, PageUncheckedUpdateManyInput>
    /**
     * Filter which Pages to update
     */
    where?: PageWhereInput
  }

  /**
   * Page upsert
   */
  export type PageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * The filter to search for the Page to update in case it exists.
     */
    where: PageWhereUniqueInput
    /**
     * In case the Page found by the `where` argument doesn't exist, create a new Page with this data.
     */
    create: XOR<PageCreateInput, PageUncheckedCreateInput>
    /**
     * In case the Page was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageUpdateInput, PageUncheckedUpdateInput>
  }

  /**
   * Page delete
   */
  export type PageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter which Page to delete.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page deleteMany
   */
  export type PageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pages to delete
     */
    where?: PageWhereInput
  }

  /**
   * Page.components
   */
  export type Page$componentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    where?: PageComponentWhereInput
    orderBy?: PageComponentOrderByWithRelationInput | PageComponentOrderByWithRelationInput[]
    cursor?: PageComponentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PageComponentScalarFieldEnum | PageComponentScalarFieldEnum[]
  }

  /**
   * Page without action
   */
  export type PageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
  }


  /**
   * Model PageComponent
   */

  export type AggregatePageComponent = {
    _count: PageComponentCountAggregateOutputType | null
    _avg: PageComponentAvgAggregateOutputType | null
    _sum: PageComponentSumAggregateOutputType | null
    _min: PageComponentMinAggregateOutputType | null
    _max: PageComponentMaxAggregateOutputType | null
  }

  export type PageComponentAvgAggregateOutputType = {
    x: number | null
    y: number | null
    width: number | null
    height: number | null
    zIndex: number | null
  }

  export type PageComponentSumAggregateOutputType = {
    x: number | null
    y: number | null
    width: number | null
    height: number | null
    zIndex: number | null
  }

  export type PageComponentMinAggregateOutputType = {
    id: string | null
    pageId: string | null
    type: string | null
    x: number | null
    y: number | null
    width: number | null
    height: number | null
    zIndex: number | null
    text: string | null
    imageData: Buffer | null
    shapeData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageComponentMaxAggregateOutputType = {
    id: string | null
    pageId: string | null
    type: string | null
    x: number | null
    y: number | null
    width: number | null
    height: number | null
    zIndex: number | null
    text: string | null
    imageData: Buffer | null
    shapeData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageComponentCountAggregateOutputType = {
    id: number
    pageId: number
    type: number
    x: number
    y: number
    width: number
    height: number
    zIndex: number
    text: number
    imageData: number
    shapeData: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PageComponentAvgAggregateInputType = {
    x?: true
    y?: true
    width?: true
    height?: true
    zIndex?: true
  }

  export type PageComponentSumAggregateInputType = {
    x?: true
    y?: true
    width?: true
    height?: true
    zIndex?: true
  }

  export type PageComponentMinAggregateInputType = {
    id?: true
    pageId?: true
    type?: true
    x?: true
    y?: true
    width?: true
    height?: true
    zIndex?: true
    text?: true
    imageData?: true
    shapeData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageComponentMaxAggregateInputType = {
    id?: true
    pageId?: true
    type?: true
    x?: true
    y?: true
    width?: true
    height?: true
    zIndex?: true
    text?: true
    imageData?: true
    shapeData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageComponentCountAggregateInputType = {
    id?: true
    pageId?: true
    type?: true
    x?: true
    y?: true
    width?: true
    height?: true
    zIndex?: true
    text?: true
    imageData?: true
    shapeData?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PageComponentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageComponent to aggregate.
     */
    where?: PageComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageComponents to fetch.
     */
    orderBy?: PageComponentOrderByWithRelationInput | PageComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PageComponents
    **/
    _count?: true | PageComponentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PageComponentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PageComponentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageComponentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageComponentMaxAggregateInputType
  }

  export type GetPageComponentAggregateType<T extends PageComponentAggregateArgs> = {
        [P in keyof T & keyof AggregatePageComponent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePageComponent[P]>
      : GetScalarType<T[P], AggregatePageComponent[P]>
  }




  export type PageComponentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageComponentWhereInput
    orderBy?: PageComponentOrderByWithAggregationInput | PageComponentOrderByWithAggregationInput[]
    by: PageComponentScalarFieldEnum[] | PageComponentScalarFieldEnum
    having?: PageComponentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageComponentCountAggregateInputType | true
    _avg?: PageComponentAvgAggregateInputType
    _sum?: PageComponentSumAggregateInputType
    _min?: PageComponentMinAggregateInputType
    _max?: PageComponentMaxAggregateInputType
  }

  export type PageComponentGroupByOutputType = {
    id: string
    pageId: string
    type: string
    x: number
    y: number
    width: number
    height: number
    zIndex: number
    text: string | null
    imageData: Buffer | null
    shapeData: string | null
    createdAt: Date
    updatedAt: Date
    _count: PageComponentCountAggregateOutputType | null
    _avg: PageComponentAvgAggregateOutputType | null
    _sum: PageComponentSumAggregateOutputType | null
    _min: PageComponentMinAggregateOutputType | null
    _max: PageComponentMaxAggregateOutputType | null
  }

  type GetPageComponentGroupByPayload<T extends PageComponentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageComponentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageComponentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageComponentGroupByOutputType[P]>
            : GetScalarType<T[P], PageComponentGroupByOutputType[P]>
        }
      >
    >


  export type PageComponentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pageId?: boolean
    type?: boolean
    x?: boolean
    y?: boolean
    width?: boolean
    height?: boolean
    zIndex?: boolean
    text?: boolean
    imageData?: boolean
    shapeData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    page?: boolean | PageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pageComponent"]>

  export type PageComponentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pageId?: boolean
    type?: boolean
    x?: boolean
    y?: boolean
    width?: boolean
    height?: boolean
    zIndex?: boolean
    text?: boolean
    imageData?: boolean
    shapeData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    page?: boolean | PageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pageComponent"]>

  export type PageComponentSelectScalar = {
    id?: boolean
    pageId?: boolean
    type?: boolean
    x?: boolean
    y?: boolean
    width?: boolean
    height?: boolean
    zIndex?: boolean
    text?: boolean
    imageData?: boolean
    shapeData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PageComponentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    page?: boolean | PageDefaultArgs<ExtArgs>
  }
  export type PageComponentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    page?: boolean | PageDefaultArgs<ExtArgs>
  }

  export type $PageComponentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PageComponent"
    objects: {
      page: Prisma.$PagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pageId: string
      type: string
      x: number
      y: number
      width: number
      height: number
      zIndex: number
      text: string | null
      imageData: Buffer | null
      shapeData: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pageComponent"]>
    composites: {}
  }

  type PageComponentGetPayload<S extends boolean | null | undefined | PageComponentDefaultArgs> = $Result.GetResult<Prisma.$PageComponentPayload, S>

  type PageComponentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PageComponentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PageComponentCountAggregateInputType | true
    }

  export interface PageComponentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PageComponent'], meta: { name: 'PageComponent' } }
    /**
     * Find zero or one PageComponent that matches the filter.
     * @param {PageComponentFindUniqueArgs} args - Arguments to find a PageComponent
     * @example
     * // Get one PageComponent
     * const pageComponent = await prisma.pageComponent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PageComponentFindUniqueArgs>(args: SelectSubset<T, PageComponentFindUniqueArgs<ExtArgs>>): Prisma__PageComponentClient<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PageComponent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PageComponentFindUniqueOrThrowArgs} args - Arguments to find a PageComponent
     * @example
     * // Get one PageComponent
     * const pageComponent = await prisma.pageComponent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PageComponentFindUniqueOrThrowArgs>(args: SelectSubset<T, PageComponentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PageComponentClient<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PageComponent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageComponentFindFirstArgs} args - Arguments to find a PageComponent
     * @example
     * // Get one PageComponent
     * const pageComponent = await prisma.pageComponent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PageComponentFindFirstArgs>(args?: SelectSubset<T, PageComponentFindFirstArgs<ExtArgs>>): Prisma__PageComponentClient<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PageComponent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageComponentFindFirstOrThrowArgs} args - Arguments to find a PageComponent
     * @example
     * // Get one PageComponent
     * const pageComponent = await prisma.pageComponent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PageComponentFindFirstOrThrowArgs>(args?: SelectSubset<T, PageComponentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PageComponentClient<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PageComponents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageComponentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PageComponents
     * const pageComponents = await prisma.pageComponent.findMany()
     * 
     * // Get first 10 PageComponents
     * const pageComponents = await prisma.pageComponent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageComponentWithIdOnly = await prisma.pageComponent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PageComponentFindManyArgs>(args?: SelectSubset<T, PageComponentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PageComponent.
     * @param {PageComponentCreateArgs} args - Arguments to create a PageComponent.
     * @example
     * // Create one PageComponent
     * const PageComponent = await prisma.pageComponent.create({
     *   data: {
     *     // ... data to create a PageComponent
     *   }
     * })
     * 
     */
    create<T extends PageComponentCreateArgs>(args: SelectSubset<T, PageComponentCreateArgs<ExtArgs>>): Prisma__PageComponentClient<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PageComponents.
     * @param {PageComponentCreateManyArgs} args - Arguments to create many PageComponents.
     * @example
     * // Create many PageComponents
     * const pageComponent = await prisma.pageComponent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PageComponentCreateManyArgs>(args?: SelectSubset<T, PageComponentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PageComponents and returns the data saved in the database.
     * @param {PageComponentCreateManyAndReturnArgs} args - Arguments to create many PageComponents.
     * @example
     * // Create many PageComponents
     * const pageComponent = await prisma.pageComponent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PageComponents and only return the `id`
     * const pageComponentWithIdOnly = await prisma.pageComponent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PageComponentCreateManyAndReturnArgs>(args?: SelectSubset<T, PageComponentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PageComponent.
     * @param {PageComponentDeleteArgs} args - Arguments to delete one PageComponent.
     * @example
     * // Delete one PageComponent
     * const PageComponent = await prisma.pageComponent.delete({
     *   where: {
     *     // ... filter to delete one PageComponent
     *   }
     * })
     * 
     */
    delete<T extends PageComponentDeleteArgs>(args: SelectSubset<T, PageComponentDeleteArgs<ExtArgs>>): Prisma__PageComponentClient<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PageComponent.
     * @param {PageComponentUpdateArgs} args - Arguments to update one PageComponent.
     * @example
     * // Update one PageComponent
     * const pageComponent = await prisma.pageComponent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PageComponentUpdateArgs>(args: SelectSubset<T, PageComponentUpdateArgs<ExtArgs>>): Prisma__PageComponentClient<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PageComponents.
     * @param {PageComponentDeleteManyArgs} args - Arguments to filter PageComponents to delete.
     * @example
     * // Delete a few PageComponents
     * const { count } = await prisma.pageComponent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PageComponentDeleteManyArgs>(args?: SelectSubset<T, PageComponentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PageComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageComponentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PageComponents
     * const pageComponent = await prisma.pageComponent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PageComponentUpdateManyArgs>(args: SelectSubset<T, PageComponentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PageComponent.
     * @param {PageComponentUpsertArgs} args - Arguments to update or create a PageComponent.
     * @example
     * // Update or create a PageComponent
     * const pageComponent = await prisma.pageComponent.upsert({
     *   create: {
     *     // ... data to create a PageComponent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PageComponent we want to update
     *   }
     * })
     */
    upsert<T extends PageComponentUpsertArgs>(args: SelectSubset<T, PageComponentUpsertArgs<ExtArgs>>): Prisma__PageComponentClient<$Result.GetResult<Prisma.$PageComponentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PageComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageComponentCountArgs} args - Arguments to filter PageComponents to count.
     * @example
     * // Count the number of PageComponents
     * const count = await prisma.pageComponent.count({
     *   where: {
     *     // ... the filter for the PageComponents we want to count
     *   }
     * })
    **/
    count<T extends PageComponentCountArgs>(
      args?: Subset<T, PageComponentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageComponentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PageComponent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageComponentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageComponentAggregateArgs>(args: Subset<T, PageComponentAggregateArgs>): Prisma.PrismaPromise<GetPageComponentAggregateType<T>>

    /**
     * Group by PageComponent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageComponentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageComponentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageComponentGroupByArgs['orderBy'] }
        : { orderBy?: PageComponentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageComponentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageComponentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PageComponent model
   */
  readonly fields: PageComponentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PageComponent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PageComponentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    page<T extends PageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PageDefaultArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PageComponent model
   */ 
  interface PageComponentFieldRefs {
    readonly id: FieldRef<"PageComponent", 'String'>
    readonly pageId: FieldRef<"PageComponent", 'String'>
    readonly type: FieldRef<"PageComponent", 'String'>
    readonly x: FieldRef<"PageComponent", 'Float'>
    readonly y: FieldRef<"PageComponent", 'Float'>
    readonly width: FieldRef<"PageComponent", 'Float'>
    readonly height: FieldRef<"PageComponent", 'Float'>
    readonly zIndex: FieldRef<"PageComponent", 'Int'>
    readonly text: FieldRef<"PageComponent", 'String'>
    readonly imageData: FieldRef<"PageComponent", 'Bytes'>
    readonly shapeData: FieldRef<"PageComponent", 'String'>
    readonly createdAt: FieldRef<"PageComponent", 'DateTime'>
    readonly updatedAt: FieldRef<"PageComponent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PageComponent findUnique
   */
  export type PageComponentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    /**
     * Filter, which PageComponent to fetch.
     */
    where: PageComponentWhereUniqueInput
  }

  /**
   * PageComponent findUniqueOrThrow
   */
  export type PageComponentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    /**
     * Filter, which PageComponent to fetch.
     */
    where: PageComponentWhereUniqueInput
  }

  /**
   * PageComponent findFirst
   */
  export type PageComponentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    /**
     * Filter, which PageComponent to fetch.
     */
    where?: PageComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageComponents to fetch.
     */
    orderBy?: PageComponentOrderByWithRelationInput | PageComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageComponents.
     */
    cursor?: PageComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageComponents.
     */
    distinct?: PageComponentScalarFieldEnum | PageComponentScalarFieldEnum[]
  }

  /**
   * PageComponent findFirstOrThrow
   */
  export type PageComponentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    /**
     * Filter, which PageComponent to fetch.
     */
    where?: PageComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageComponents to fetch.
     */
    orderBy?: PageComponentOrderByWithRelationInput | PageComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageComponents.
     */
    cursor?: PageComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageComponents.
     */
    distinct?: PageComponentScalarFieldEnum | PageComponentScalarFieldEnum[]
  }

  /**
   * PageComponent findMany
   */
  export type PageComponentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    /**
     * Filter, which PageComponents to fetch.
     */
    where?: PageComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageComponents to fetch.
     */
    orderBy?: PageComponentOrderByWithRelationInput | PageComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PageComponents.
     */
    cursor?: PageComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageComponents.
     */
    skip?: number
    distinct?: PageComponentScalarFieldEnum | PageComponentScalarFieldEnum[]
  }

  /**
   * PageComponent create
   */
  export type PageComponentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    /**
     * The data needed to create a PageComponent.
     */
    data: XOR<PageComponentCreateInput, PageComponentUncheckedCreateInput>
  }

  /**
   * PageComponent createMany
   */
  export type PageComponentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PageComponents.
     */
    data: PageComponentCreateManyInput | PageComponentCreateManyInput[]
  }

  /**
   * PageComponent createManyAndReturn
   */
  export type PageComponentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PageComponents.
     */
    data: PageComponentCreateManyInput | PageComponentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PageComponent update
   */
  export type PageComponentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    /**
     * The data needed to update a PageComponent.
     */
    data: XOR<PageComponentUpdateInput, PageComponentUncheckedUpdateInput>
    /**
     * Choose, which PageComponent to update.
     */
    where: PageComponentWhereUniqueInput
  }

  /**
   * PageComponent updateMany
   */
  export type PageComponentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PageComponents.
     */
    data: XOR<PageComponentUpdateManyMutationInput, PageComponentUncheckedUpdateManyInput>
    /**
     * Filter which PageComponents to update
     */
    where?: PageComponentWhereInput
  }

  /**
   * PageComponent upsert
   */
  export type PageComponentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    /**
     * The filter to search for the PageComponent to update in case it exists.
     */
    where: PageComponentWhereUniqueInput
    /**
     * In case the PageComponent found by the `where` argument doesn't exist, create a new PageComponent with this data.
     */
    create: XOR<PageComponentCreateInput, PageComponentUncheckedCreateInput>
    /**
     * In case the PageComponent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageComponentUpdateInput, PageComponentUncheckedUpdateInput>
  }

  /**
   * PageComponent delete
   */
  export type PageComponentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
    /**
     * Filter which PageComponent to delete.
     */
    where: PageComponentWhereUniqueInput
  }

  /**
   * PageComponent deleteMany
   */
  export type PageComponentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageComponents to delete
     */
    where?: PageComponentWhereInput
  }

  /**
   * PageComponent without action
   */
  export type PageComponentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageComponent
     */
    select?: PageComponentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageComponentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NotebookScalarFieldEnum: {
    id: 'id',
    title: 'title',
    color: 'color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotebookScalarFieldEnum = (typeof NotebookScalarFieldEnum)[keyof typeof NotebookScalarFieldEnum]


  export const SectionGroupScalarFieldEnum: {
    id: 'id',
    title: 'title',
    notebookId: 'notebookId',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SectionGroupScalarFieldEnum = (typeof SectionGroupScalarFieldEnum)[keyof typeof SectionGroupScalarFieldEnum]


  export const SectionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    notebookId: 'notebookId',
    sectionGroupId: 'sectionGroupId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


  export const PageScalarFieldEnum: {
    id: 'id',
    title: 'title',
    sectionId: 'sectionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PageScalarFieldEnum = (typeof PageScalarFieldEnum)[keyof typeof PageScalarFieldEnum]


  export const PageComponentScalarFieldEnum: {
    id: 'id',
    pageId: 'pageId',
    type: 'type',
    x: 'x',
    y: 'y',
    width: 'width',
    height: 'height',
    zIndex: 'zIndex',
    text: 'text',
    imageData: 'imageData',
    shapeData: 'shapeData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PageComponentScalarFieldEnum = (typeof PageComponentScalarFieldEnum)[keyof typeof PageComponentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    
  /**
   * Deep Input Types
   */


  export type NotebookWhereInput = {
    AND?: NotebookWhereInput | NotebookWhereInput[]
    OR?: NotebookWhereInput[]
    NOT?: NotebookWhereInput | NotebookWhereInput[]
    id?: StringFilter<"Notebook"> | string
    title?: StringFilter<"Notebook"> | string
    color?: StringNullableFilter<"Notebook"> | string | null
    createdAt?: DateTimeFilter<"Notebook"> | Date | string
    updatedAt?: DateTimeFilter<"Notebook"> | Date | string
    sectionGroups?: SectionGroupListRelationFilter
    sections?: SectionListRelationFilter
  }

  export type NotebookOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sectionGroups?: SectionGroupOrderByRelationAggregateInput
    sections?: SectionOrderByRelationAggregateInput
  }

  export type NotebookWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotebookWhereInput | NotebookWhereInput[]
    OR?: NotebookWhereInput[]
    NOT?: NotebookWhereInput | NotebookWhereInput[]
    title?: StringFilter<"Notebook"> | string
    color?: StringNullableFilter<"Notebook"> | string | null
    createdAt?: DateTimeFilter<"Notebook"> | Date | string
    updatedAt?: DateTimeFilter<"Notebook"> | Date | string
    sectionGroups?: SectionGroupListRelationFilter
    sections?: SectionListRelationFilter
  }, "id">

  export type NotebookOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotebookCountOrderByAggregateInput
    _max?: NotebookMaxOrderByAggregateInput
    _min?: NotebookMinOrderByAggregateInput
  }

  export type NotebookScalarWhereWithAggregatesInput = {
    AND?: NotebookScalarWhereWithAggregatesInput | NotebookScalarWhereWithAggregatesInput[]
    OR?: NotebookScalarWhereWithAggregatesInput[]
    NOT?: NotebookScalarWhereWithAggregatesInput | NotebookScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notebook"> | string
    title?: StringWithAggregatesFilter<"Notebook"> | string
    color?: StringNullableWithAggregatesFilter<"Notebook"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notebook"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notebook"> | Date | string
  }

  export type SectionGroupWhereInput = {
    AND?: SectionGroupWhereInput | SectionGroupWhereInput[]
    OR?: SectionGroupWhereInput[]
    NOT?: SectionGroupWhereInput | SectionGroupWhereInput[]
    id?: StringFilter<"SectionGroup"> | string
    title?: StringFilter<"SectionGroup"> | string
    notebookId?: StringFilter<"SectionGroup"> | string
    parentId?: StringNullableFilter<"SectionGroup"> | string | null
    createdAt?: DateTimeFilter<"SectionGroup"> | Date | string
    updatedAt?: DateTimeFilter<"SectionGroup"> | Date | string
    notebook?: XOR<NotebookRelationFilter, NotebookWhereInput>
    parent?: XOR<SectionGroupNullableRelationFilter, SectionGroupWhereInput> | null
    children?: SectionGroupListRelationFilter
    sections?: SectionListRelationFilter
  }

  export type SectionGroupOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notebook?: NotebookOrderByWithRelationInput
    parent?: SectionGroupOrderByWithRelationInput
    children?: SectionGroupOrderByRelationAggregateInput
    sections?: SectionOrderByRelationAggregateInput
  }

  export type SectionGroupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SectionGroupWhereInput | SectionGroupWhereInput[]
    OR?: SectionGroupWhereInput[]
    NOT?: SectionGroupWhereInput | SectionGroupWhereInput[]
    title?: StringFilter<"SectionGroup"> | string
    notebookId?: StringFilter<"SectionGroup"> | string
    parentId?: StringNullableFilter<"SectionGroup"> | string | null
    createdAt?: DateTimeFilter<"SectionGroup"> | Date | string
    updatedAt?: DateTimeFilter<"SectionGroup"> | Date | string
    notebook?: XOR<NotebookRelationFilter, NotebookWhereInput>
    parent?: XOR<SectionGroupNullableRelationFilter, SectionGroupWhereInput> | null
    children?: SectionGroupListRelationFilter
    sections?: SectionListRelationFilter
  }, "id">

  export type SectionGroupOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SectionGroupCountOrderByAggregateInput
    _max?: SectionGroupMaxOrderByAggregateInput
    _min?: SectionGroupMinOrderByAggregateInput
  }

  export type SectionGroupScalarWhereWithAggregatesInput = {
    AND?: SectionGroupScalarWhereWithAggregatesInput | SectionGroupScalarWhereWithAggregatesInput[]
    OR?: SectionGroupScalarWhereWithAggregatesInput[]
    NOT?: SectionGroupScalarWhereWithAggregatesInput | SectionGroupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SectionGroup"> | string
    title?: StringWithAggregatesFilter<"SectionGroup"> | string
    notebookId?: StringWithAggregatesFilter<"SectionGroup"> | string
    parentId?: StringNullableWithAggregatesFilter<"SectionGroup"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SectionGroup"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SectionGroup"> | Date | string
  }

  export type SectionWhereInput = {
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    id?: StringFilter<"Section"> | string
    title?: StringFilter<"Section"> | string
    notebookId?: StringFilter<"Section"> | string
    sectionGroupId?: StringNullableFilter<"Section"> | string | null
    createdAt?: DateTimeFilter<"Section"> | Date | string
    updatedAt?: DateTimeFilter<"Section"> | Date | string
    notebook?: XOR<NotebookRelationFilter, NotebookWhereInput>
    sectionGroup?: XOR<SectionGroupNullableRelationFilter, SectionGroupWhereInput> | null
    pages?: PageListRelationFilter
  }

  export type SectionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    sectionGroupId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notebook?: NotebookOrderByWithRelationInput
    sectionGroup?: SectionGroupOrderByWithRelationInput
    pages?: PageOrderByRelationAggregateInput
  }

  export type SectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    title?: StringFilter<"Section"> | string
    notebookId?: StringFilter<"Section"> | string
    sectionGroupId?: StringNullableFilter<"Section"> | string | null
    createdAt?: DateTimeFilter<"Section"> | Date | string
    updatedAt?: DateTimeFilter<"Section"> | Date | string
    notebook?: XOR<NotebookRelationFilter, NotebookWhereInput>
    sectionGroup?: XOR<SectionGroupNullableRelationFilter, SectionGroupWhereInput> | null
    pages?: PageListRelationFilter
  }, "id">

  export type SectionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    sectionGroupId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SectionCountOrderByAggregateInput
    _max?: SectionMaxOrderByAggregateInput
    _min?: SectionMinOrderByAggregateInput
  }

  export type SectionScalarWhereWithAggregatesInput = {
    AND?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    OR?: SectionScalarWhereWithAggregatesInput[]
    NOT?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Section"> | string
    title?: StringWithAggregatesFilter<"Section"> | string
    notebookId?: StringWithAggregatesFilter<"Section"> | string
    sectionGroupId?: StringNullableWithAggregatesFilter<"Section"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Section"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Section"> | Date | string
  }

  export type PageWhereInput = {
    AND?: PageWhereInput | PageWhereInput[]
    OR?: PageWhereInput[]
    NOT?: PageWhereInput | PageWhereInput[]
    id?: StringFilter<"Page"> | string
    title?: StringFilter<"Page"> | string
    sectionId?: StringFilter<"Page"> | string
    createdAt?: DateTimeFilter<"Page"> | Date | string
    updatedAt?: DateTimeFilter<"Page"> | Date | string
    section?: XOR<SectionRelationFilter, SectionWhereInput>
    components?: PageComponentListRelationFilter
  }

  export type PageOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    section?: SectionOrderByWithRelationInput
    components?: PageComponentOrderByRelationAggregateInput
  }

  export type PageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PageWhereInput | PageWhereInput[]
    OR?: PageWhereInput[]
    NOT?: PageWhereInput | PageWhereInput[]
    title?: StringFilter<"Page"> | string
    sectionId?: StringFilter<"Page"> | string
    createdAt?: DateTimeFilter<"Page"> | Date | string
    updatedAt?: DateTimeFilter<"Page"> | Date | string
    section?: XOR<SectionRelationFilter, SectionWhereInput>
    components?: PageComponentListRelationFilter
  }, "id">

  export type PageOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PageCountOrderByAggregateInput
    _max?: PageMaxOrderByAggregateInput
    _min?: PageMinOrderByAggregateInput
  }

  export type PageScalarWhereWithAggregatesInput = {
    AND?: PageScalarWhereWithAggregatesInput | PageScalarWhereWithAggregatesInput[]
    OR?: PageScalarWhereWithAggregatesInput[]
    NOT?: PageScalarWhereWithAggregatesInput | PageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Page"> | string
    title?: StringWithAggregatesFilter<"Page"> | string
    sectionId?: StringWithAggregatesFilter<"Page"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Page"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Page"> | Date | string
  }

  export type PageComponentWhereInput = {
    AND?: PageComponentWhereInput | PageComponentWhereInput[]
    OR?: PageComponentWhereInput[]
    NOT?: PageComponentWhereInput | PageComponentWhereInput[]
    id?: StringFilter<"PageComponent"> | string
    pageId?: StringFilter<"PageComponent"> | string
    type?: StringFilter<"PageComponent"> | string
    x?: FloatFilter<"PageComponent"> | number
    y?: FloatFilter<"PageComponent"> | number
    width?: FloatFilter<"PageComponent"> | number
    height?: FloatFilter<"PageComponent"> | number
    zIndex?: IntFilter<"PageComponent"> | number
    text?: StringNullableFilter<"PageComponent"> | string | null
    imageData?: BytesNullableFilter<"PageComponent"> | Buffer | null
    shapeData?: StringNullableFilter<"PageComponent"> | string | null
    createdAt?: DateTimeFilter<"PageComponent"> | Date | string
    updatedAt?: DateTimeFilter<"PageComponent"> | Date | string
    page?: XOR<PageRelationFilter, PageWhereInput>
  }

  export type PageComponentOrderByWithRelationInput = {
    id?: SortOrder
    pageId?: SortOrder
    type?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    zIndex?: SortOrder
    text?: SortOrderInput | SortOrder
    imageData?: SortOrderInput | SortOrder
    shapeData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    page?: PageOrderByWithRelationInput
  }

  export type PageComponentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PageComponentWhereInput | PageComponentWhereInput[]
    OR?: PageComponentWhereInput[]
    NOT?: PageComponentWhereInput | PageComponentWhereInput[]
    pageId?: StringFilter<"PageComponent"> | string
    type?: StringFilter<"PageComponent"> | string
    x?: FloatFilter<"PageComponent"> | number
    y?: FloatFilter<"PageComponent"> | number
    width?: FloatFilter<"PageComponent"> | number
    height?: FloatFilter<"PageComponent"> | number
    zIndex?: IntFilter<"PageComponent"> | number
    text?: StringNullableFilter<"PageComponent"> | string | null
    imageData?: BytesNullableFilter<"PageComponent"> | Buffer | null
    shapeData?: StringNullableFilter<"PageComponent"> | string | null
    createdAt?: DateTimeFilter<"PageComponent"> | Date | string
    updatedAt?: DateTimeFilter<"PageComponent"> | Date | string
    page?: XOR<PageRelationFilter, PageWhereInput>
  }, "id">

  export type PageComponentOrderByWithAggregationInput = {
    id?: SortOrder
    pageId?: SortOrder
    type?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    zIndex?: SortOrder
    text?: SortOrderInput | SortOrder
    imageData?: SortOrderInput | SortOrder
    shapeData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PageComponentCountOrderByAggregateInput
    _avg?: PageComponentAvgOrderByAggregateInput
    _max?: PageComponentMaxOrderByAggregateInput
    _min?: PageComponentMinOrderByAggregateInput
    _sum?: PageComponentSumOrderByAggregateInput
  }

  export type PageComponentScalarWhereWithAggregatesInput = {
    AND?: PageComponentScalarWhereWithAggregatesInput | PageComponentScalarWhereWithAggregatesInput[]
    OR?: PageComponentScalarWhereWithAggregatesInput[]
    NOT?: PageComponentScalarWhereWithAggregatesInput | PageComponentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PageComponent"> | string
    pageId?: StringWithAggregatesFilter<"PageComponent"> | string
    type?: StringWithAggregatesFilter<"PageComponent"> | string
    x?: FloatWithAggregatesFilter<"PageComponent"> | number
    y?: FloatWithAggregatesFilter<"PageComponent"> | number
    width?: FloatWithAggregatesFilter<"PageComponent"> | number
    height?: FloatWithAggregatesFilter<"PageComponent"> | number
    zIndex?: IntWithAggregatesFilter<"PageComponent"> | number
    text?: StringNullableWithAggregatesFilter<"PageComponent"> | string | null
    imageData?: BytesNullableWithAggregatesFilter<"PageComponent"> | Buffer | null
    shapeData?: StringNullableWithAggregatesFilter<"PageComponent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PageComponent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PageComponent"> | Date | string
  }

  export type NotebookCreateInput = {
    id?: string
    title: string
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionGroups?: SectionGroupCreateNestedManyWithoutNotebookInput
    sections?: SectionCreateNestedManyWithoutNotebookInput
  }

  export type NotebookUncheckedCreateInput = {
    id?: string
    title: string
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionGroups?: SectionGroupUncheckedCreateNestedManyWithoutNotebookInput
    sections?: SectionUncheckedCreateNestedManyWithoutNotebookInput
  }

  export type NotebookUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionGroups?: SectionGroupUpdateManyWithoutNotebookNestedInput
    sections?: SectionUpdateManyWithoutNotebookNestedInput
  }

  export type NotebookUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionGroups?: SectionGroupUncheckedUpdateManyWithoutNotebookNestedInput
    sections?: SectionUncheckedUpdateManyWithoutNotebookNestedInput
  }

  export type NotebookCreateManyInput = {
    id?: string
    title: string
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotebookUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotebookUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionGroupCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notebook: NotebookCreateNestedOneWithoutSectionGroupsInput
    parent?: SectionGroupCreateNestedOneWithoutChildrenInput
    children?: SectionGroupCreateNestedManyWithoutParentInput
    sections?: SectionCreateNestedManyWithoutSectionGroupInput
  }

  export type SectionGroupUncheckedCreateInput = {
    id?: string
    title: string
    notebookId: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SectionGroupUncheckedCreateNestedManyWithoutParentInput
    sections?: SectionUncheckedCreateNestedManyWithoutSectionGroupInput
  }

  export type SectionGroupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notebook?: NotebookUpdateOneRequiredWithoutSectionGroupsNestedInput
    parent?: SectionGroupUpdateOneWithoutChildrenNestedInput
    children?: SectionGroupUpdateManyWithoutParentNestedInput
    sections?: SectionUpdateManyWithoutSectionGroupNestedInput
  }

  export type SectionGroupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SectionGroupUncheckedUpdateManyWithoutParentNestedInput
    sections?: SectionUncheckedUpdateManyWithoutSectionGroupNestedInput
  }

  export type SectionGroupCreateManyInput = {
    id?: string
    title: string
    notebookId: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionGroupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionGroupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notebook: NotebookCreateNestedOneWithoutSectionsInput
    sectionGroup?: SectionGroupCreateNestedOneWithoutSectionsInput
    pages?: PageCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateInput = {
    id?: string
    title: string
    notebookId: string
    sectionGroupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pages?: PageUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notebook?: NotebookUpdateOneRequiredWithoutSectionsNestedInput
    sectionGroup?: SectionGroupUpdateOneWithoutSectionsNestedInput
    pages?: PageUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    sectionGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pages?: PageUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionCreateManyInput = {
    id?: string
    title: string
    notebookId: string
    sectionGroupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    sectionGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    section: SectionCreateNestedOneWithoutPagesInput
    components?: PageComponentCreateNestedManyWithoutPageInput
  }

  export type PageUncheckedCreateInput = {
    id?: string
    title: string
    sectionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    components?: PageComponentUncheckedCreateNestedManyWithoutPageInput
  }

  export type PageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    section?: SectionUpdateOneRequiredWithoutPagesNestedInput
    components?: PageComponentUpdateManyWithoutPageNestedInput
  }

  export type PageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sectionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    components?: PageComponentUncheckedUpdateManyWithoutPageNestedInput
  }

  export type PageCreateManyInput = {
    id?: string
    title: string
    sectionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sectionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageComponentCreateInput = {
    id?: string
    type: string
    x: number
    y: number
    width: number
    height: number
    zIndex?: number
    text?: string | null
    imageData?: Buffer | null
    shapeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    page: PageCreateNestedOneWithoutComponentsInput
  }

  export type PageComponentUncheckedCreateInput = {
    id?: string
    pageId: string
    type: string
    x: number
    y: number
    width: number
    height: number
    zIndex?: number
    text?: string | null
    imageData?: Buffer | null
    shapeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageComponentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    zIndex?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    imageData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    shapeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    page?: PageUpdateOneRequiredWithoutComponentsNestedInput
  }

  export type PageComponentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    zIndex?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    imageData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    shapeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageComponentCreateManyInput = {
    id?: string
    pageId: string
    type: string
    x: number
    y: number
    width: number
    height: number
    zIndex?: number
    text?: string | null
    imageData?: Buffer | null
    shapeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageComponentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    zIndex?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    imageData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    shapeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageComponentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    zIndex?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    imageData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    shapeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SectionGroupListRelationFilter = {
    every?: SectionGroupWhereInput
    some?: SectionGroupWhereInput
    none?: SectionGroupWhereInput
  }

  export type SectionListRelationFilter = {
    every?: SectionWhereInput
    some?: SectionWhereInput
    none?: SectionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SectionGroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotebookCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotebookMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotebookMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NotebookRelationFilter = {
    is?: NotebookWhereInput
    isNot?: NotebookWhereInput
  }

  export type SectionGroupNullableRelationFilter = {
    is?: SectionGroupWhereInput | null
    isNot?: SectionGroupWhereInput | null
  }

  export type SectionGroupCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionGroupMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageListRelationFilter = {
    every?: PageWhereInput
    some?: PageWhereInput
    none?: PageWhereInput
  }

  export type PageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SectionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    sectionGroupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    sectionGroupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    notebookId?: SortOrder
    sectionGroupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionRelationFilter = {
    is?: SectionWhereInput
    isNot?: SectionWhereInput
  }

  export type PageComponentListRelationFilter = {
    every?: PageComponentWhereInput
    some?: PageComponentWhereInput
    none?: PageComponentWhereInput
  }

  export type PageComponentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PageCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    sectionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type PageRelationFilter = {
    is?: PageWhereInput
    isNot?: PageWhereInput
  }

  export type PageComponentCountOrderByAggregateInput = {
    id?: SortOrder
    pageId?: SortOrder
    type?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    zIndex?: SortOrder
    text?: SortOrder
    imageData?: SortOrder
    shapeData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageComponentAvgOrderByAggregateInput = {
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    zIndex?: SortOrder
  }

  export type PageComponentMaxOrderByAggregateInput = {
    id?: SortOrder
    pageId?: SortOrder
    type?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    zIndex?: SortOrder
    text?: SortOrder
    imageData?: SortOrder
    shapeData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageComponentMinOrderByAggregateInput = {
    id?: SortOrder
    pageId?: SortOrder
    type?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    zIndex?: SortOrder
    text?: SortOrder
    imageData?: SortOrder
    shapeData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageComponentSumOrderByAggregateInput = {
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    zIndex?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type SectionGroupCreateNestedManyWithoutNotebookInput = {
    create?: XOR<SectionGroupCreateWithoutNotebookInput, SectionGroupUncheckedCreateWithoutNotebookInput> | SectionGroupCreateWithoutNotebookInput[] | SectionGroupUncheckedCreateWithoutNotebookInput[]
    connectOrCreate?: SectionGroupCreateOrConnectWithoutNotebookInput | SectionGroupCreateOrConnectWithoutNotebookInput[]
    createMany?: SectionGroupCreateManyNotebookInputEnvelope
    connect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
  }

  export type SectionCreateNestedManyWithoutNotebookInput = {
    create?: XOR<SectionCreateWithoutNotebookInput, SectionUncheckedCreateWithoutNotebookInput> | SectionCreateWithoutNotebookInput[] | SectionUncheckedCreateWithoutNotebookInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutNotebookInput | SectionCreateOrConnectWithoutNotebookInput[]
    createMany?: SectionCreateManyNotebookInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type SectionGroupUncheckedCreateNestedManyWithoutNotebookInput = {
    create?: XOR<SectionGroupCreateWithoutNotebookInput, SectionGroupUncheckedCreateWithoutNotebookInput> | SectionGroupCreateWithoutNotebookInput[] | SectionGroupUncheckedCreateWithoutNotebookInput[]
    connectOrCreate?: SectionGroupCreateOrConnectWithoutNotebookInput | SectionGroupCreateOrConnectWithoutNotebookInput[]
    createMany?: SectionGroupCreateManyNotebookInputEnvelope
    connect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutNotebookInput = {
    create?: XOR<SectionCreateWithoutNotebookInput, SectionUncheckedCreateWithoutNotebookInput> | SectionCreateWithoutNotebookInput[] | SectionUncheckedCreateWithoutNotebookInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutNotebookInput | SectionCreateOrConnectWithoutNotebookInput[]
    createMany?: SectionCreateManyNotebookInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SectionGroupUpdateManyWithoutNotebookNestedInput = {
    create?: XOR<SectionGroupCreateWithoutNotebookInput, SectionGroupUncheckedCreateWithoutNotebookInput> | SectionGroupCreateWithoutNotebookInput[] | SectionGroupUncheckedCreateWithoutNotebookInput[]
    connectOrCreate?: SectionGroupCreateOrConnectWithoutNotebookInput | SectionGroupCreateOrConnectWithoutNotebookInput[]
    upsert?: SectionGroupUpsertWithWhereUniqueWithoutNotebookInput | SectionGroupUpsertWithWhereUniqueWithoutNotebookInput[]
    createMany?: SectionGroupCreateManyNotebookInputEnvelope
    set?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    disconnect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    delete?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    connect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    update?: SectionGroupUpdateWithWhereUniqueWithoutNotebookInput | SectionGroupUpdateWithWhereUniqueWithoutNotebookInput[]
    updateMany?: SectionGroupUpdateManyWithWhereWithoutNotebookInput | SectionGroupUpdateManyWithWhereWithoutNotebookInput[]
    deleteMany?: SectionGroupScalarWhereInput | SectionGroupScalarWhereInput[]
  }

  export type SectionUpdateManyWithoutNotebookNestedInput = {
    create?: XOR<SectionCreateWithoutNotebookInput, SectionUncheckedCreateWithoutNotebookInput> | SectionCreateWithoutNotebookInput[] | SectionUncheckedCreateWithoutNotebookInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutNotebookInput | SectionCreateOrConnectWithoutNotebookInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutNotebookInput | SectionUpsertWithWhereUniqueWithoutNotebookInput[]
    createMany?: SectionCreateManyNotebookInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutNotebookInput | SectionUpdateWithWhereUniqueWithoutNotebookInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutNotebookInput | SectionUpdateManyWithWhereWithoutNotebookInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type SectionGroupUncheckedUpdateManyWithoutNotebookNestedInput = {
    create?: XOR<SectionGroupCreateWithoutNotebookInput, SectionGroupUncheckedCreateWithoutNotebookInput> | SectionGroupCreateWithoutNotebookInput[] | SectionGroupUncheckedCreateWithoutNotebookInput[]
    connectOrCreate?: SectionGroupCreateOrConnectWithoutNotebookInput | SectionGroupCreateOrConnectWithoutNotebookInput[]
    upsert?: SectionGroupUpsertWithWhereUniqueWithoutNotebookInput | SectionGroupUpsertWithWhereUniqueWithoutNotebookInput[]
    createMany?: SectionGroupCreateManyNotebookInputEnvelope
    set?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    disconnect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    delete?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    connect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    update?: SectionGroupUpdateWithWhereUniqueWithoutNotebookInput | SectionGroupUpdateWithWhereUniqueWithoutNotebookInput[]
    updateMany?: SectionGroupUpdateManyWithWhereWithoutNotebookInput | SectionGroupUpdateManyWithWhereWithoutNotebookInput[]
    deleteMany?: SectionGroupScalarWhereInput | SectionGroupScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutNotebookNestedInput = {
    create?: XOR<SectionCreateWithoutNotebookInput, SectionUncheckedCreateWithoutNotebookInput> | SectionCreateWithoutNotebookInput[] | SectionUncheckedCreateWithoutNotebookInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutNotebookInput | SectionCreateOrConnectWithoutNotebookInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutNotebookInput | SectionUpsertWithWhereUniqueWithoutNotebookInput[]
    createMany?: SectionCreateManyNotebookInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutNotebookInput | SectionUpdateWithWhereUniqueWithoutNotebookInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutNotebookInput | SectionUpdateManyWithWhereWithoutNotebookInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type NotebookCreateNestedOneWithoutSectionGroupsInput = {
    create?: XOR<NotebookCreateWithoutSectionGroupsInput, NotebookUncheckedCreateWithoutSectionGroupsInput>
    connectOrCreate?: NotebookCreateOrConnectWithoutSectionGroupsInput
    connect?: NotebookWhereUniqueInput
  }

  export type SectionGroupCreateNestedOneWithoutChildrenInput = {
    create?: XOR<SectionGroupCreateWithoutChildrenInput, SectionGroupUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: SectionGroupCreateOrConnectWithoutChildrenInput
    connect?: SectionGroupWhereUniqueInput
  }

  export type SectionGroupCreateNestedManyWithoutParentInput = {
    create?: XOR<SectionGroupCreateWithoutParentInput, SectionGroupUncheckedCreateWithoutParentInput> | SectionGroupCreateWithoutParentInput[] | SectionGroupUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SectionGroupCreateOrConnectWithoutParentInput | SectionGroupCreateOrConnectWithoutParentInput[]
    createMany?: SectionGroupCreateManyParentInputEnvelope
    connect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
  }

  export type SectionCreateNestedManyWithoutSectionGroupInput = {
    create?: XOR<SectionCreateWithoutSectionGroupInput, SectionUncheckedCreateWithoutSectionGroupInput> | SectionCreateWithoutSectionGroupInput[] | SectionUncheckedCreateWithoutSectionGroupInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutSectionGroupInput | SectionCreateOrConnectWithoutSectionGroupInput[]
    createMany?: SectionCreateManySectionGroupInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type SectionGroupUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<SectionGroupCreateWithoutParentInput, SectionGroupUncheckedCreateWithoutParentInput> | SectionGroupCreateWithoutParentInput[] | SectionGroupUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SectionGroupCreateOrConnectWithoutParentInput | SectionGroupCreateOrConnectWithoutParentInput[]
    createMany?: SectionGroupCreateManyParentInputEnvelope
    connect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutSectionGroupInput = {
    create?: XOR<SectionCreateWithoutSectionGroupInput, SectionUncheckedCreateWithoutSectionGroupInput> | SectionCreateWithoutSectionGroupInput[] | SectionUncheckedCreateWithoutSectionGroupInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutSectionGroupInput | SectionCreateOrConnectWithoutSectionGroupInput[]
    createMany?: SectionCreateManySectionGroupInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type NotebookUpdateOneRequiredWithoutSectionGroupsNestedInput = {
    create?: XOR<NotebookCreateWithoutSectionGroupsInput, NotebookUncheckedCreateWithoutSectionGroupsInput>
    connectOrCreate?: NotebookCreateOrConnectWithoutSectionGroupsInput
    upsert?: NotebookUpsertWithoutSectionGroupsInput
    connect?: NotebookWhereUniqueInput
    update?: XOR<XOR<NotebookUpdateToOneWithWhereWithoutSectionGroupsInput, NotebookUpdateWithoutSectionGroupsInput>, NotebookUncheckedUpdateWithoutSectionGroupsInput>
  }

  export type SectionGroupUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<SectionGroupCreateWithoutChildrenInput, SectionGroupUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: SectionGroupCreateOrConnectWithoutChildrenInput
    upsert?: SectionGroupUpsertWithoutChildrenInput
    disconnect?: SectionGroupWhereInput | boolean
    delete?: SectionGroupWhereInput | boolean
    connect?: SectionGroupWhereUniqueInput
    update?: XOR<XOR<SectionGroupUpdateToOneWithWhereWithoutChildrenInput, SectionGroupUpdateWithoutChildrenInput>, SectionGroupUncheckedUpdateWithoutChildrenInput>
  }

  export type SectionGroupUpdateManyWithoutParentNestedInput = {
    create?: XOR<SectionGroupCreateWithoutParentInput, SectionGroupUncheckedCreateWithoutParentInput> | SectionGroupCreateWithoutParentInput[] | SectionGroupUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SectionGroupCreateOrConnectWithoutParentInput | SectionGroupCreateOrConnectWithoutParentInput[]
    upsert?: SectionGroupUpsertWithWhereUniqueWithoutParentInput | SectionGroupUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: SectionGroupCreateManyParentInputEnvelope
    set?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    disconnect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    delete?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    connect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    update?: SectionGroupUpdateWithWhereUniqueWithoutParentInput | SectionGroupUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: SectionGroupUpdateManyWithWhereWithoutParentInput | SectionGroupUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: SectionGroupScalarWhereInput | SectionGroupScalarWhereInput[]
  }

  export type SectionUpdateManyWithoutSectionGroupNestedInput = {
    create?: XOR<SectionCreateWithoutSectionGroupInput, SectionUncheckedCreateWithoutSectionGroupInput> | SectionCreateWithoutSectionGroupInput[] | SectionUncheckedCreateWithoutSectionGroupInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutSectionGroupInput | SectionCreateOrConnectWithoutSectionGroupInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutSectionGroupInput | SectionUpsertWithWhereUniqueWithoutSectionGroupInput[]
    createMany?: SectionCreateManySectionGroupInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutSectionGroupInput | SectionUpdateWithWhereUniqueWithoutSectionGroupInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutSectionGroupInput | SectionUpdateManyWithWhereWithoutSectionGroupInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type SectionGroupUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<SectionGroupCreateWithoutParentInput, SectionGroupUncheckedCreateWithoutParentInput> | SectionGroupCreateWithoutParentInput[] | SectionGroupUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SectionGroupCreateOrConnectWithoutParentInput | SectionGroupCreateOrConnectWithoutParentInput[]
    upsert?: SectionGroupUpsertWithWhereUniqueWithoutParentInput | SectionGroupUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: SectionGroupCreateManyParentInputEnvelope
    set?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    disconnect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    delete?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    connect?: SectionGroupWhereUniqueInput | SectionGroupWhereUniqueInput[]
    update?: SectionGroupUpdateWithWhereUniqueWithoutParentInput | SectionGroupUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: SectionGroupUpdateManyWithWhereWithoutParentInput | SectionGroupUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: SectionGroupScalarWhereInput | SectionGroupScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutSectionGroupNestedInput = {
    create?: XOR<SectionCreateWithoutSectionGroupInput, SectionUncheckedCreateWithoutSectionGroupInput> | SectionCreateWithoutSectionGroupInput[] | SectionUncheckedCreateWithoutSectionGroupInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutSectionGroupInput | SectionCreateOrConnectWithoutSectionGroupInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutSectionGroupInput | SectionUpsertWithWhereUniqueWithoutSectionGroupInput[]
    createMany?: SectionCreateManySectionGroupInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutSectionGroupInput | SectionUpdateWithWhereUniqueWithoutSectionGroupInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutSectionGroupInput | SectionUpdateManyWithWhereWithoutSectionGroupInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type NotebookCreateNestedOneWithoutSectionsInput = {
    create?: XOR<NotebookCreateWithoutSectionsInput, NotebookUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: NotebookCreateOrConnectWithoutSectionsInput
    connect?: NotebookWhereUniqueInput
  }

  export type SectionGroupCreateNestedOneWithoutSectionsInput = {
    create?: XOR<SectionGroupCreateWithoutSectionsInput, SectionGroupUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: SectionGroupCreateOrConnectWithoutSectionsInput
    connect?: SectionGroupWhereUniqueInput
  }

  export type PageCreateNestedManyWithoutSectionInput = {
    create?: XOR<PageCreateWithoutSectionInput, PageUncheckedCreateWithoutSectionInput> | PageCreateWithoutSectionInput[] | PageUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: PageCreateOrConnectWithoutSectionInput | PageCreateOrConnectWithoutSectionInput[]
    createMany?: PageCreateManySectionInputEnvelope
    connect?: PageWhereUniqueInput | PageWhereUniqueInput[]
  }

  export type PageUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<PageCreateWithoutSectionInput, PageUncheckedCreateWithoutSectionInput> | PageCreateWithoutSectionInput[] | PageUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: PageCreateOrConnectWithoutSectionInput | PageCreateOrConnectWithoutSectionInput[]
    createMany?: PageCreateManySectionInputEnvelope
    connect?: PageWhereUniqueInput | PageWhereUniqueInput[]
  }

  export type NotebookUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<NotebookCreateWithoutSectionsInput, NotebookUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: NotebookCreateOrConnectWithoutSectionsInput
    upsert?: NotebookUpsertWithoutSectionsInput
    connect?: NotebookWhereUniqueInput
    update?: XOR<XOR<NotebookUpdateToOneWithWhereWithoutSectionsInput, NotebookUpdateWithoutSectionsInput>, NotebookUncheckedUpdateWithoutSectionsInput>
  }

  export type SectionGroupUpdateOneWithoutSectionsNestedInput = {
    create?: XOR<SectionGroupCreateWithoutSectionsInput, SectionGroupUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: SectionGroupCreateOrConnectWithoutSectionsInput
    upsert?: SectionGroupUpsertWithoutSectionsInput
    disconnect?: SectionGroupWhereInput | boolean
    delete?: SectionGroupWhereInput | boolean
    connect?: SectionGroupWhereUniqueInput
    update?: XOR<XOR<SectionGroupUpdateToOneWithWhereWithoutSectionsInput, SectionGroupUpdateWithoutSectionsInput>, SectionGroupUncheckedUpdateWithoutSectionsInput>
  }

  export type PageUpdateManyWithoutSectionNestedInput = {
    create?: XOR<PageCreateWithoutSectionInput, PageUncheckedCreateWithoutSectionInput> | PageCreateWithoutSectionInput[] | PageUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: PageCreateOrConnectWithoutSectionInput | PageCreateOrConnectWithoutSectionInput[]
    upsert?: PageUpsertWithWhereUniqueWithoutSectionInput | PageUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: PageCreateManySectionInputEnvelope
    set?: PageWhereUniqueInput | PageWhereUniqueInput[]
    disconnect?: PageWhereUniqueInput | PageWhereUniqueInput[]
    delete?: PageWhereUniqueInput | PageWhereUniqueInput[]
    connect?: PageWhereUniqueInput | PageWhereUniqueInput[]
    update?: PageUpdateWithWhereUniqueWithoutSectionInput | PageUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: PageUpdateManyWithWhereWithoutSectionInput | PageUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: PageScalarWhereInput | PageScalarWhereInput[]
  }

  export type PageUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<PageCreateWithoutSectionInput, PageUncheckedCreateWithoutSectionInput> | PageCreateWithoutSectionInput[] | PageUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: PageCreateOrConnectWithoutSectionInput | PageCreateOrConnectWithoutSectionInput[]
    upsert?: PageUpsertWithWhereUniqueWithoutSectionInput | PageUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: PageCreateManySectionInputEnvelope
    set?: PageWhereUniqueInput | PageWhereUniqueInput[]
    disconnect?: PageWhereUniqueInput | PageWhereUniqueInput[]
    delete?: PageWhereUniqueInput | PageWhereUniqueInput[]
    connect?: PageWhereUniqueInput | PageWhereUniqueInput[]
    update?: PageUpdateWithWhereUniqueWithoutSectionInput | PageUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: PageUpdateManyWithWhereWithoutSectionInput | PageUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: PageScalarWhereInput | PageScalarWhereInput[]
  }

  export type SectionCreateNestedOneWithoutPagesInput = {
    create?: XOR<SectionCreateWithoutPagesInput, SectionUncheckedCreateWithoutPagesInput>
    connectOrCreate?: SectionCreateOrConnectWithoutPagesInput
    connect?: SectionWhereUniqueInput
  }

  export type PageComponentCreateNestedManyWithoutPageInput = {
    create?: XOR<PageComponentCreateWithoutPageInput, PageComponentUncheckedCreateWithoutPageInput> | PageComponentCreateWithoutPageInput[] | PageComponentUncheckedCreateWithoutPageInput[]
    connectOrCreate?: PageComponentCreateOrConnectWithoutPageInput | PageComponentCreateOrConnectWithoutPageInput[]
    createMany?: PageComponentCreateManyPageInputEnvelope
    connect?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
  }

  export type PageComponentUncheckedCreateNestedManyWithoutPageInput = {
    create?: XOR<PageComponentCreateWithoutPageInput, PageComponentUncheckedCreateWithoutPageInput> | PageComponentCreateWithoutPageInput[] | PageComponentUncheckedCreateWithoutPageInput[]
    connectOrCreate?: PageComponentCreateOrConnectWithoutPageInput | PageComponentCreateOrConnectWithoutPageInput[]
    createMany?: PageComponentCreateManyPageInputEnvelope
    connect?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
  }

  export type SectionUpdateOneRequiredWithoutPagesNestedInput = {
    create?: XOR<SectionCreateWithoutPagesInput, SectionUncheckedCreateWithoutPagesInput>
    connectOrCreate?: SectionCreateOrConnectWithoutPagesInput
    upsert?: SectionUpsertWithoutPagesInput
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutPagesInput, SectionUpdateWithoutPagesInput>, SectionUncheckedUpdateWithoutPagesInput>
  }

  export type PageComponentUpdateManyWithoutPageNestedInput = {
    create?: XOR<PageComponentCreateWithoutPageInput, PageComponentUncheckedCreateWithoutPageInput> | PageComponentCreateWithoutPageInput[] | PageComponentUncheckedCreateWithoutPageInput[]
    connectOrCreate?: PageComponentCreateOrConnectWithoutPageInput | PageComponentCreateOrConnectWithoutPageInput[]
    upsert?: PageComponentUpsertWithWhereUniqueWithoutPageInput | PageComponentUpsertWithWhereUniqueWithoutPageInput[]
    createMany?: PageComponentCreateManyPageInputEnvelope
    set?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
    disconnect?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
    delete?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
    connect?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
    update?: PageComponentUpdateWithWhereUniqueWithoutPageInput | PageComponentUpdateWithWhereUniqueWithoutPageInput[]
    updateMany?: PageComponentUpdateManyWithWhereWithoutPageInput | PageComponentUpdateManyWithWhereWithoutPageInput[]
    deleteMany?: PageComponentScalarWhereInput | PageComponentScalarWhereInput[]
  }

  export type PageComponentUncheckedUpdateManyWithoutPageNestedInput = {
    create?: XOR<PageComponentCreateWithoutPageInput, PageComponentUncheckedCreateWithoutPageInput> | PageComponentCreateWithoutPageInput[] | PageComponentUncheckedCreateWithoutPageInput[]
    connectOrCreate?: PageComponentCreateOrConnectWithoutPageInput | PageComponentCreateOrConnectWithoutPageInput[]
    upsert?: PageComponentUpsertWithWhereUniqueWithoutPageInput | PageComponentUpsertWithWhereUniqueWithoutPageInput[]
    createMany?: PageComponentCreateManyPageInputEnvelope
    set?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
    disconnect?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
    delete?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
    connect?: PageComponentWhereUniqueInput | PageComponentWhereUniqueInput[]
    update?: PageComponentUpdateWithWhereUniqueWithoutPageInput | PageComponentUpdateWithWhereUniqueWithoutPageInput[]
    updateMany?: PageComponentUpdateManyWithWhereWithoutPageInput | PageComponentUpdateManyWithWhereWithoutPageInput[]
    deleteMany?: PageComponentScalarWhereInput | PageComponentScalarWhereInput[]
  }

  export type PageCreateNestedOneWithoutComponentsInput = {
    create?: XOR<PageCreateWithoutComponentsInput, PageUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: PageCreateOrConnectWithoutComponentsInput
    connect?: PageWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type PageUpdateOneRequiredWithoutComponentsNestedInput = {
    create?: XOR<PageCreateWithoutComponentsInput, PageUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: PageCreateOrConnectWithoutComponentsInput
    upsert?: PageUpsertWithoutComponentsInput
    connect?: PageWhereUniqueInput
    update?: XOR<XOR<PageUpdateToOneWithWhereWithoutComponentsInput, PageUpdateWithoutComponentsInput>, PageUncheckedUpdateWithoutComponentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type SectionGroupCreateWithoutNotebookInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: SectionGroupCreateNestedOneWithoutChildrenInput
    children?: SectionGroupCreateNestedManyWithoutParentInput
    sections?: SectionCreateNestedManyWithoutSectionGroupInput
  }

  export type SectionGroupUncheckedCreateWithoutNotebookInput = {
    id?: string
    title: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SectionGroupUncheckedCreateNestedManyWithoutParentInput
    sections?: SectionUncheckedCreateNestedManyWithoutSectionGroupInput
  }

  export type SectionGroupCreateOrConnectWithoutNotebookInput = {
    where: SectionGroupWhereUniqueInput
    create: XOR<SectionGroupCreateWithoutNotebookInput, SectionGroupUncheckedCreateWithoutNotebookInput>
  }

  export type SectionGroupCreateManyNotebookInputEnvelope = {
    data: SectionGroupCreateManyNotebookInput | SectionGroupCreateManyNotebookInput[]
  }

  export type SectionCreateWithoutNotebookInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionGroup?: SectionGroupCreateNestedOneWithoutSectionsInput
    pages?: PageCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutNotebookInput = {
    id?: string
    title: string
    sectionGroupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pages?: PageUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutNotebookInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutNotebookInput, SectionUncheckedCreateWithoutNotebookInput>
  }

  export type SectionCreateManyNotebookInputEnvelope = {
    data: SectionCreateManyNotebookInput | SectionCreateManyNotebookInput[]
  }

  export type SectionGroupUpsertWithWhereUniqueWithoutNotebookInput = {
    where: SectionGroupWhereUniqueInput
    update: XOR<SectionGroupUpdateWithoutNotebookInput, SectionGroupUncheckedUpdateWithoutNotebookInput>
    create: XOR<SectionGroupCreateWithoutNotebookInput, SectionGroupUncheckedCreateWithoutNotebookInput>
  }

  export type SectionGroupUpdateWithWhereUniqueWithoutNotebookInput = {
    where: SectionGroupWhereUniqueInput
    data: XOR<SectionGroupUpdateWithoutNotebookInput, SectionGroupUncheckedUpdateWithoutNotebookInput>
  }

  export type SectionGroupUpdateManyWithWhereWithoutNotebookInput = {
    where: SectionGroupScalarWhereInput
    data: XOR<SectionGroupUpdateManyMutationInput, SectionGroupUncheckedUpdateManyWithoutNotebookInput>
  }

  export type SectionGroupScalarWhereInput = {
    AND?: SectionGroupScalarWhereInput | SectionGroupScalarWhereInput[]
    OR?: SectionGroupScalarWhereInput[]
    NOT?: SectionGroupScalarWhereInput | SectionGroupScalarWhereInput[]
    id?: StringFilter<"SectionGroup"> | string
    title?: StringFilter<"SectionGroup"> | string
    notebookId?: StringFilter<"SectionGroup"> | string
    parentId?: StringNullableFilter<"SectionGroup"> | string | null
    createdAt?: DateTimeFilter<"SectionGroup"> | Date | string
    updatedAt?: DateTimeFilter<"SectionGroup"> | Date | string
  }

  export type SectionUpsertWithWhereUniqueWithoutNotebookInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutNotebookInput, SectionUncheckedUpdateWithoutNotebookInput>
    create: XOR<SectionCreateWithoutNotebookInput, SectionUncheckedCreateWithoutNotebookInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutNotebookInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutNotebookInput, SectionUncheckedUpdateWithoutNotebookInput>
  }

  export type SectionUpdateManyWithWhereWithoutNotebookInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutNotebookInput>
  }

  export type SectionScalarWhereInput = {
    AND?: SectionScalarWhereInput | SectionScalarWhereInput[]
    OR?: SectionScalarWhereInput[]
    NOT?: SectionScalarWhereInput | SectionScalarWhereInput[]
    id?: StringFilter<"Section"> | string
    title?: StringFilter<"Section"> | string
    notebookId?: StringFilter<"Section"> | string
    sectionGroupId?: StringNullableFilter<"Section"> | string | null
    createdAt?: DateTimeFilter<"Section"> | Date | string
    updatedAt?: DateTimeFilter<"Section"> | Date | string
  }

  export type NotebookCreateWithoutSectionGroupsInput = {
    id?: string
    title: string
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionCreateNestedManyWithoutNotebookInput
  }

  export type NotebookUncheckedCreateWithoutSectionGroupsInput = {
    id?: string
    title: string
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutNotebookInput
  }

  export type NotebookCreateOrConnectWithoutSectionGroupsInput = {
    where: NotebookWhereUniqueInput
    create: XOR<NotebookCreateWithoutSectionGroupsInput, NotebookUncheckedCreateWithoutSectionGroupsInput>
  }

  export type SectionGroupCreateWithoutChildrenInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notebook: NotebookCreateNestedOneWithoutSectionGroupsInput
    parent?: SectionGroupCreateNestedOneWithoutChildrenInput
    sections?: SectionCreateNestedManyWithoutSectionGroupInput
  }

  export type SectionGroupUncheckedCreateWithoutChildrenInput = {
    id?: string
    title: string
    notebookId: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutSectionGroupInput
  }

  export type SectionGroupCreateOrConnectWithoutChildrenInput = {
    where: SectionGroupWhereUniqueInput
    create: XOR<SectionGroupCreateWithoutChildrenInput, SectionGroupUncheckedCreateWithoutChildrenInput>
  }

  export type SectionGroupCreateWithoutParentInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notebook: NotebookCreateNestedOneWithoutSectionGroupsInput
    children?: SectionGroupCreateNestedManyWithoutParentInput
    sections?: SectionCreateNestedManyWithoutSectionGroupInput
  }

  export type SectionGroupUncheckedCreateWithoutParentInput = {
    id?: string
    title: string
    notebookId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SectionGroupUncheckedCreateNestedManyWithoutParentInput
    sections?: SectionUncheckedCreateNestedManyWithoutSectionGroupInput
  }

  export type SectionGroupCreateOrConnectWithoutParentInput = {
    where: SectionGroupWhereUniqueInput
    create: XOR<SectionGroupCreateWithoutParentInput, SectionGroupUncheckedCreateWithoutParentInput>
  }

  export type SectionGroupCreateManyParentInputEnvelope = {
    data: SectionGroupCreateManyParentInput | SectionGroupCreateManyParentInput[]
  }

  export type SectionCreateWithoutSectionGroupInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notebook: NotebookCreateNestedOneWithoutSectionsInput
    pages?: PageCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutSectionGroupInput = {
    id?: string
    title: string
    notebookId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pages?: PageUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutSectionGroupInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutSectionGroupInput, SectionUncheckedCreateWithoutSectionGroupInput>
  }

  export type SectionCreateManySectionGroupInputEnvelope = {
    data: SectionCreateManySectionGroupInput | SectionCreateManySectionGroupInput[]
  }

  export type NotebookUpsertWithoutSectionGroupsInput = {
    update: XOR<NotebookUpdateWithoutSectionGroupsInput, NotebookUncheckedUpdateWithoutSectionGroupsInput>
    create: XOR<NotebookCreateWithoutSectionGroupsInput, NotebookUncheckedCreateWithoutSectionGroupsInput>
    where?: NotebookWhereInput
  }

  export type NotebookUpdateToOneWithWhereWithoutSectionGroupsInput = {
    where?: NotebookWhereInput
    data: XOR<NotebookUpdateWithoutSectionGroupsInput, NotebookUncheckedUpdateWithoutSectionGroupsInput>
  }

  export type NotebookUpdateWithoutSectionGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUpdateManyWithoutNotebookNestedInput
  }

  export type NotebookUncheckedUpdateWithoutSectionGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutNotebookNestedInput
  }

  export type SectionGroupUpsertWithoutChildrenInput = {
    update: XOR<SectionGroupUpdateWithoutChildrenInput, SectionGroupUncheckedUpdateWithoutChildrenInput>
    create: XOR<SectionGroupCreateWithoutChildrenInput, SectionGroupUncheckedCreateWithoutChildrenInput>
    where?: SectionGroupWhereInput
  }

  export type SectionGroupUpdateToOneWithWhereWithoutChildrenInput = {
    where?: SectionGroupWhereInput
    data: XOR<SectionGroupUpdateWithoutChildrenInput, SectionGroupUncheckedUpdateWithoutChildrenInput>
  }

  export type SectionGroupUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notebook?: NotebookUpdateOneRequiredWithoutSectionGroupsNestedInput
    parent?: SectionGroupUpdateOneWithoutChildrenNestedInput
    sections?: SectionUpdateManyWithoutSectionGroupNestedInput
  }

  export type SectionGroupUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutSectionGroupNestedInput
  }

  export type SectionGroupUpsertWithWhereUniqueWithoutParentInput = {
    where: SectionGroupWhereUniqueInput
    update: XOR<SectionGroupUpdateWithoutParentInput, SectionGroupUncheckedUpdateWithoutParentInput>
    create: XOR<SectionGroupCreateWithoutParentInput, SectionGroupUncheckedCreateWithoutParentInput>
  }

  export type SectionGroupUpdateWithWhereUniqueWithoutParentInput = {
    where: SectionGroupWhereUniqueInput
    data: XOR<SectionGroupUpdateWithoutParentInput, SectionGroupUncheckedUpdateWithoutParentInput>
  }

  export type SectionGroupUpdateManyWithWhereWithoutParentInput = {
    where: SectionGroupScalarWhereInput
    data: XOR<SectionGroupUpdateManyMutationInput, SectionGroupUncheckedUpdateManyWithoutParentInput>
  }

  export type SectionUpsertWithWhereUniqueWithoutSectionGroupInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutSectionGroupInput, SectionUncheckedUpdateWithoutSectionGroupInput>
    create: XOR<SectionCreateWithoutSectionGroupInput, SectionUncheckedCreateWithoutSectionGroupInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutSectionGroupInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutSectionGroupInput, SectionUncheckedUpdateWithoutSectionGroupInput>
  }

  export type SectionUpdateManyWithWhereWithoutSectionGroupInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutSectionGroupInput>
  }

  export type NotebookCreateWithoutSectionsInput = {
    id?: string
    title: string
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionGroups?: SectionGroupCreateNestedManyWithoutNotebookInput
  }

  export type NotebookUncheckedCreateWithoutSectionsInput = {
    id?: string
    title: string
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sectionGroups?: SectionGroupUncheckedCreateNestedManyWithoutNotebookInput
  }

  export type NotebookCreateOrConnectWithoutSectionsInput = {
    where: NotebookWhereUniqueInput
    create: XOR<NotebookCreateWithoutSectionsInput, NotebookUncheckedCreateWithoutSectionsInput>
  }

  export type SectionGroupCreateWithoutSectionsInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notebook: NotebookCreateNestedOneWithoutSectionGroupsInput
    parent?: SectionGroupCreateNestedOneWithoutChildrenInput
    children?: SectionGroupCreateNestedManyWithoutParentInput
  }

  export type SectionGroupUncheckedCreateWithoutSectionsInput = {
    id?: string
    title: string
    notebookId: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SectionGroupUncheckedCreateNestedManyWithoutParentInput
  }

  export type SectionGroupCreateOrConnectWithoutSectionsInput = {
    where: SectionGroupWhereUniqueInput
    create: XOR<SectionGroupCreateWithoutSectionsInput, SectionGroupUncheckedCreateWithoutSectionsInput>
  }

  export type PageCreateWithoutSectionInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    components?: PageComponentCreateNestedManyWithoutPageInput
  }

  export type PageUncheckedCreateWithoutSectionInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    components?: PageComponentUncheckedCreateNestedManyWithoutPageInput
  }

  export type PageCreateOrConnectWithoutSectionInput = {
    where: PageWhereUniqueInput
    create: XOR<PageCreateWithoutSectionInput, PageUncheckedCreateWithoutSectionInput>
  }

  export type PageCreateManySectionInputEnvelope = {
    data: PageCreateManySectionInput | PageCreateManySectionInput[]
  }

  export type NotebookUpsertWithoutSectionsInput = {
    update: XOR<NotebookUpdateWithoutSectionsInput, NotebookUncheckedUpdateWithoutSectionsInput>
    create: XOR<NotebookCreateWithoutSectionsInput, NotebookUncheckedCreateWithoutSectionsInput>
    where?: NotebookWhereInput
  }

  export type NotebookUpdateToOneWithWhereWithoutSectionsInput = {
    where?: NotebookWhereInput
    data: XOR<NotebookUpdateWithoutSectionsInput, NotebookUncheckedUpdateWithoutSectionsInput>
  }

  export type NotebookUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionGroups?: SectionGroupUpdateManyWithoutNotebookNestedInput
  }

  export type NotebookUncheckedUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionGroups?: SectionGroupUncheckedUpdateManyWithoutNotebookNestedInput
  }

  export type SectionGroupUpsertWithoutSectionsInput = {
    update: XOR<SectionGroupUpdateWithoutSectionsInput, SectionGroupUncheckedUpdateWithoutSectionsInput>
    create: XOR<SectionGroupCreateWithoutSectionsInput, SectionGroupUncheckedCreateWithoutSectionsInput>
    where?: SectionGroupWhereInput
  }

  export type SectionGroupUpdateToOneWithWhereWithoutSectionsInput = {
    where?: SectionGroupWhereInput
    data: XOR<SectionGroupUpdateWithoutSectionsInput, SectionGroupUncheckedUpdateWithoutSectionsInput>
  }

  export type SectionGroupUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notebook?: NotebookUpdateOneRequiredWithoutSectionGroupsNestedInput
    parent?: SectionGroupUpdateOneWithoutChildrenNestedInput
    children?: SectionGroupUpdateManyWithoutParentNestedInput
  }

  export type SectionGroupUncheckedUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SectionGroupUncheckedUpdateManyWithoutParentNestedInput
  }

  export type PageUpsertWithWhereUniqueWithoutSectionInput = {
    where: PageWhereUniqueInput
    update: XOR<PageUpdateWithoutSectionInput, PageUncheckedUpdateWithoutSectionInput>
    create: XOR<PageCreateWithoutSectionInput, PageUncheckedCreateWithoutSectionInput>
  }

  export type PageUpdateWithWhereUniqueWithoutSectionInput = {
    where: PageWhereUniqueInput
    data: XOR<PageUpdateWithoutSectionInput, PageUncheckedUpdateWithoutSectionInput>
  }

  export type PageUpdateManyWithWhereWithoutSectionInput = {
    where: PageScalarWhereInput
    data: XOR<PageUpdateManyMutationInput, PageUncheckedUpdateManyWithoutSectionInput>
  }

  export type PageScalarWhereInput = {
    AND?: PageScalarWhereInput | PageScalarWhereInput[]
    OR?: PageScalarWhereInput[]
    NOT?: PageScalarWhereInput | PageScalarWhereInput[]
    id?: StringFilter<"Page"> | string
    title?: StringFilter<"Page"> | string
    sectionId?: StringFilter<"Page"> | string
    createdAt?: DateTimeFilter<"Page"> | Date | string
    updatedAt?: DateTimeFilter<"Page"> | Date | string
  }

  export type SectionCreateWithoutPagesInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notebook: NotebookCreateNestedOneWithoutSectionsInput
    sectionGroup?: SectionGroupCreateNestedOneWithoutSectionsInput
  }

  export type SectionUncheckedCreateWithoutPagesInput = {
    id?: string
    title: string
    notebookId: string
    sectionGroupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionCreateOrConnectWithoutPagesInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutPagesInput, SectionUncheckedCreateWithoutPagesInput>
  }

  export type PageComponentCreateWithoutPageInput = {
    id?: string
    type: string
    x: number
    y: number
    width: number
    height: number
    zIndex?: number
    text?: string | null
    imageData?: Buffer | null
    shapeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageComponentUncheckedCreateWithoutPageInput = {
    id?: string
    type: string
    x: number
    y: number
    width: number
    height: number
    zIndex?: number
    text?: string | null
    imageData?: Buffer | null
    shapeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageComponentCreateOrConnectWithoutPageInput = {
    where: PageComponentWhereUniqueInput
    create: XOR<PageComponentCreateWithoutPageInput, PageComponentUncheckedCreateWithoutPageInput>
  }

  export type PageComponentCreateManyPageInputEnvelope = {
    data: PageComponentCreateManyPageInput | PageComponentCreateManyPageInput[]
  }

  export type SectionUpsertWithoutPagesInput = {
    update: XOR<SectionUpdateWithoutPagesInput, SectionUncheckedUpdateWithoutPagesInput>
    create: XOR<SectionCreateWithoutPagesInput, SectionUncheckedCreateWithoutPagesInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutPagesInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutPagesInput, SectionUncheckedUpdateWithoutPagesInput>
  }

  export type SectionUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notebook?: NotebookUpdateOneRequiredWithoutSectionsNestedInput
    sectionGroup?: SectionGroupUpdateOneWithoutSectionsNestedInput
  }

  export type SectionUncheckedUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    sectionGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageComponentUpsertWithWhereUniqueWithoutPageInput = {
    where: PageComponentWhereUniqueInput
    update: XOR<PageComponentUpdateWithoutPageInput, PageComponentUncheckedUpdateWithoutPageInput>
    create: XOR<PageComponentCreateWithoutPageInput, PageComponentUncheckedCreateWithoutPageInput>
  }

  export type PageComponentUpdateWithWhereUniqueWithoutPageInput = {
    where: PageComponentWhereUniqueInput
    data: XOR<PageComponentUpdateWithoutPageInput, PageComponentUncheckedUpdateWithoutPageInput>
  }

  export type PageComponentUpdateManyWithWhereWithoutPageInput = {
    where: PageComponentScalarWhereInput
    data: XOR<PageComponentUpdateManyMutationInput, PageComponentUncheckedUpdateManyWithoutPageInput>
  }

  export type PageComponentScalarWhereInput = {
    AND?: PageComponentScalarWhereInput | PageComponentScalarWhereInput[]
    OR?: PageComponentScalarWhereInput[]
    NOT?: PageComponentScalarWhereInput | PageComponentScalarWhereInput[]
    id?: StringFilter<"PageComponent"> | string
    pageId?: StringFilter<"PageComponent"> | string
    type?: StringFilter<"PageComponent"> | string
    x?: FloatFilter<"PageComponent"> | number
    y?: FloatFilter<"PageComponent"> | number
    width?: FloatFilter<"PageComponent"> | number
    height?: FloatFilter<"PageComponent"> | number
    zIndex?: IntFilter<"PageComponent"> | number
    text?: StringNullableFilter<"PageComponent"> | string | null
    imageData?: BytesNullableFilter<"PageComponent"> | Buffer | null
    shapeData?: StringNullableFilter<"PageComponent"> | string | null
    createdAt?: DateTimeFilter<"PageComponent"> | Date | string
    updatedAt?: DateTimeFilter<"PageComponent"> | Date | string
  }

  export type PageCreateWithoutComponentsInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    section: SectionCreateNestedOneWithoutPagesInput
  }

  export type PageUncheckedCreateWithoutComponentsInput = {
    id?: string
    title: string
    sectionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageCreateOrConnectWithoutComponentsInput = {
    where: PageWhereUniqueInput
    create: XOR<PageCreateWithoutComponentsInput, PageUncheckedCreateWithoutComponentsInput>
  }

  export type PageUpsertWithoutComponentsInput = {
    update: XOR<PageUpdateWithoutComponentsInput, PageUncheckedUpdateWithoutComponentsInput>
    create: XOR<PageCreateWithoutComponentsInput, PageUncheckedCreateWithoutComponentsInput>
    where?: PageWhereInput
  }

  export type PageUpdateToOneWithWhereWithoutComponentsInput = {
    where?: PageWhereInput
    data: XOR<PageUpdateWithoutComponentsInput, PageUncheckedUpdateWithoutComponentsInput>
  }

  export type PageUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    section?: SectionUpdateOneRequiredWithoutPagesNestedInput
  }

  export type PageUncheckedUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sectionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionGroupCreateManyNotebookInput = {
    id?: string
    title: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionCreateManyNotebookInput = {
    id?: string
    title: string
    sectionGroupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionGroupUpdateWithoutNotebookInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: SectionGroupUpdateOneWithoutChildrenNestedInput
    children?: SectionGroupUpdateManyWithoutParentNestedInput
    sections?: SectionUpdateManyWithoutSectionGroupNestedInput
  }

  export type SectionGroupUncheckedUpdateWithoutNotebookInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SectionGroupUncheckedUpdateManyWithoutParentNestedInput
    sections?: SectionUncheckedUpdateManyWithoutSectionGroupNestedInput
  }

  export type SectionGroupUncheckedUpdateManyWithoutNotebookInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUpdateWithoutNotebookInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sectionGroup?: SectionGroupUpdateOneWithoutSectionsNestedInput
    pages?: PageUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutNotebookInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sectionGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pages?: PageUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateManyWithoutNotebookInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sectionGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionGroupCreateManyParentInput = {
    id?: string
    title: string
    notebookId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionCreateManySectionGroupInput = {
    id?: string
    title: string
    notebookId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionGroupUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notebook?: NotebookUpdateOneRequiredWithoutSectionGroupsNestedInput
    children?: SectionGroupUpdateManyWithoutParentNestedInput
    sections?: SectionUpdateManyWithoutSectionGroupNestedInput
  }

  export type SectionGroupUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SectionGroupUncheckedUpdateManyWithoutParentNestedInput
    sections?: SectionUncheckedUpdateManyWithoutSectionGroupNestedInput
  }

  export type SectionGroupUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUpdateWithoutSectionGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notebook?: NotebookUpdateOneRequiredWithoutSectionsNestedInput
    pages?: PageUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutSectionGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pages?: PageUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateManyWithoutSectionGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    notebookId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageCreateManySectionInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    components?: PageComponentUpdateManyWithoutPageNestedInput
  }

  export type PageUncheckedUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    components?: PageComponentUncheckedUpdateManyWithoutPageNestedInput
  }

  export type PageUncheckedUpdateManyWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageComponentCreateManyPageInput = {
    id?: string
    type: string
    x: number
    y: number
    width: number
    height: number
    zIndex?: number
    text?: string | null
    imageData?: Buffer | null
    shapeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageComponentUpdateWithoutPageInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    zIndex?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    imageData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    shapeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageComponentUncheckedUpdateWithoutPageInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    zIndex?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    imageData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    shapeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageComponentUncheckedUpdateManyWithoutPageInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    zIndex?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    imageData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    shapeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use NotebookCountOutputTypeDefaultArgs instead
     */
    export type NotebookCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotebookCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SectionGroupCountOutputTypeDefaultArgs instead
     */
    export type SectionGroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SectionGroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SectionCountOutputTypeDefaultArgs instead
     */
    export type SectionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SectionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PageCountOutputTypeDefaultArgs instead
     */
    export type PageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotebookDefaultArgs instead
     */
    export type NotebookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotebookDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SectionGroupDefaultArgs instead
     */
    export type SectionGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SectionGroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SectionDefaultArgs instead
     */
    export type SectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PageDefaultArgs instead
     */
    export type PageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PageComponentDefaultArgs instead
     */
    export type PageComponentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PageComponentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}